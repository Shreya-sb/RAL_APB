# vsim -vopt work.tb -voptargs="+acc=npr" -assertdebug -l run.log -coverage -c -do "coverage save -onexit -assert -directive -cvg -codeAll coverage.ucdb; coverage report -detail;run -all; exit" 
# Start time: 12:12:29 on Aug 06,2025
# ** Note: (vsim-3812) Design is being optimized...
# //  Questa Sim
# //  Version 10.6c linux Jul 25 2017
# //
# //  Copyright 1991-2017 Mentor Graphics Corporation
# //  All Rights Reserved.
# //
# //  QuestaSim and its associated documentation contain trade
# //  secrets and commercial or financial information that are the property of
# //  Mentor Graphics Corporation and are privileged, confidential,
# //  and exempt from disclosure under the Freedom of Information Act,
# //  5 U.S.C. Section 552. Furthermore, this information
# //  is prohibited from disclosure under the Trade Secrets Act,
# //  18 U.S.C. Section 1905.
# //
# Loading sv_std.std
# Loading mtiUvm.uvm_pkg
# Loading work.testbench_sv_unit(fast)
# Loading work.tb(fast)
# Loading work.top_if(fast)
# Loading work.top(fast)
# Loading mtiUvm.questa_uvm_pkg(fast)
# Loading work.top_if(fast)
# Loading /tools/mentor/questasim_10.6c/questasim/uvm-1.1d/linux/uvm_dpi.so
# coverage save -onexit -assert -directive -cvg -codeAll coverage.ucdb
#  coverage report -detail
# Coverage Report by file with details
# 
# =================================================================================
# === File: adapter.sv
# =================================================================================
# Statement Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Stmts                           20         0        20       0.0
# 
# ================================Statement Details================================
# 
# Statement Coverage for file adapter.sv --
# 
#     1                                                class top_adapter extends uvm_reg_adapter;
#     2               1                    ***0***       `uvm_object_utils(top_adapter)
#     2               2                    ***0***     
#     2               3                    ***0***     
#     2               4                    ***0***     
#     2               5                    ***0***     
#     2               6                    ***0***     
#     2               7                    ***0***     
#     2               8                    ***0***     
#     2               9                    ***0***     
#     2              10                    ***0***     
#     3                                                  
#     4                                                  function new( string name = "top_adapter");
#     5               1                    ***0***         super.new(name);
#     6                                                  endfunction
#     7                                                  
#     8                                                  function uvm_sequence_item reg2bus (const ref uvm_reg_bus_op rw);
#     9                                                    seq_item apb_item;
#     10              1                    ***0***         apb_item = seq_item::type_id::create("apb_item");
#     11              1                    ***0***         apb_item.pwrite = (rw.kind == UVM_WRITE)?1'b1:1'b0;
#     12              1                    ***0***         apb_item.paddr = rw.addr;
#     13              1                    ***0***         apb_item.pwdata = rw.data;
#     14              1                    ***0***         return apb_item;
#     15                                                 endfunction
#     16                                                 
#     17                                                 function void bus2reg (uvm_sequence_item bus_item,ref uvm_reg_bus_op rw);
#     18                                                   seq_item apb_item;
#     19                                                   assert ($cast(apb_item,bus_item));
#     20              1                    ***0***         rw.kind = (apb_item.pwrite == 1'b1)?UVM_WRITE:UVM_READ;
#     21              1                    ***0***         rw.data = (apb_item.pwrite == 1'b1)?apb_item.pwdata:apb_item.prdata;
#     22              1                    ***0***         rw.addr = apb_item.paddr;
#     23              1                    ***0***         rw.status = UVM_IS_OK;
#     24                                                 endfunction
#     25                                               endclass
#     26                                                 
# 
# Branch Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Branches                        14         0        14       0.0
# 
# ================================Branch Details================================
# 
# Branch Coverage for file adapter.sv --
# 
# ------------------------------------IF Branch------------------------------------
#     2                                    ***0***     Count coming in to IF
#     2               1                    ***0***       `uvm_object_utils(top_adapter)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     2                                    ***0***     Count coming in to IF
#     2               2                    ***0***       `uvm_object_utils(top_adapter)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     2                                    ***0***     Count coming in to IF
#     2               3                    ***0***       `uvm_object_utils(top_adapter)
#     2               4                    ***0***       `uvm_object_utils(top_adapter)
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     2                                    ***0***     Count coming in to IF
#     2               5                    ***0***       `uvm_object_utils(top_adapter)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     2                                    ***0***     Count coming in to IF
#     2               6                    ***0***       `uvm_object_utils(top_adapter)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     20                                   ***0***     Count coming in to IF
#     20              1                    ***0***         rw.kind = (apb_item.pwrite == 1'b1)?UVM_WRITE:UVM_READ;
#     20              2                    ***0***         rw.kind = (apb_item.pwrite == 1'b1)?UVM_WRITE:UVM_READ;
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     21                                   ***0***     Count coming in to IF
#     21              1                    ***0***         rw.data = (apb_item.pwrite == 1'b1)?apb_item.pwdata:apb_item.prdata;
#     21              2                    ***0***         rw.data = (apb_item.pwrite == 1'b1)?apb_item.pwdata:apb_item.prdata;
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# 
# Condition Coverage:
#     Enabled Coverage            Active   Covered    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FEC Condition Terms              0         0         0     100.0
# Expression Coverage:
#     Enabled Coverage            Active   Covered    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FEC Expression Terms             0         0         0     100.0
# FSM Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FSMs                                                       100.0
#         States                       0         0         0     100.0
#         Transitions                  0         0         0     100.0
# Toggle Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Toggle Bins                      0         0         0     100.0
# 
# ================================Toggle Details================================
# 
# Toggle Coverage for File adapter.sv --
# 
#        Line                                   Node      1H->0L      0L->1H  "Coverage"
# --------------------------------------------------------------------------------------
# 
# Total Node Count     =          0 
# Toggled Node Count   =          0 
# Untoggled Node Count =          0 
# 
# Toggle Coverage      =      100.0% (0 of 0 bins)
# 
# =================================================================================
# === File: agent.sv
# =================================================================================
# Statement Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Stmts                           10         0        10       0.0
# 
# ================================Statement Details================================
# 
# Statement Coverage for file agent.sv --
# 
#     1                                                class agent extends uvm_agent;
#     2               1                    ***0***       `uvm_component_utils(agent)
#     2               2                    ***0***     
#     2               3                    ***0***     
#     3                                                  driver drv;
#     4                                                  monitor mon;
#     5                                                  sequencer seqr;
#     6                                                  //uvm_sequencer#(seq_item) seqr;
#     7                                                
#     8                                                  function new(string name = "agent", uvm_component parent = null);
#     9               1                    ***0***         super.new(name,parent);
#     10                                                 endfunction
#     11                                               
#     12                                                 function void build_phase(uvm_phase phase);
#     13              1                    ***0***         super.build_phase(phase);
#     14              1                    ***0***         drv = driver::type_id::create("drv",this);
#     15              1                    ***0***         mon = monitor::type_id::create("mon",this);
#     16              1                    ***0***         seqr = sequencer::type_id::create("seqr", this);
#     17                                                 endfunction
#     18                                               
#     19                                                function void connect_phase(uvm_phase phase);
#     20              1                    ***0***         super.connect_phase(phase);
#     21              1                    ***0***         drv.seq_item_port.connect(seqr.seq_item_export);
#     22                                                 endfunction
#     23                                               endclass
# 
# Branch Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Branches                         0         0         0     100.0
# Condition Coverage:
#     Enabled Coverage            Active   Covered    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FEC Condition Terms              0         0         0     100.0
# Expression Coverage:
#     Enabled Coverage            Active   Covered    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FEC Expression Terms             0         0         0     100.0
# FSM Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FSMs                                                       100.0
#         States                       0         0         0     100.0
#         Transitions                  0         0         0     100.0
# Toggle Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Toggle Bins                      0         0         0     100.0
# 
# ================================Toggle Details================================
# 
# Toggle Coverage for File agent.sv --
# 
#        Line                                   Node      1H->0L      0L->1H  "Coverage"
# --------------------------------------------------------------------------------------
# 
# Total Node Count     =          0 
# Toggled Node Count   =          0 
# Untoggled Node Count =          0 
# 
# Toggle Coverage      =      100.0% (0 of 0 bins)
# 
# =================================================================================
# === File: design.v
# =================================================================================
# Statement Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Stmts                           17         0        17       0.0
# 
# ================================Statement Details================================
# 
# Statement Coverage for file design.v --
# 
#     1                                                module top 
#     2                                                (  
#     3                                                    input               pclk,
#     4                                                    input               presetn,
#     5                                                    input   [31 : 0]    paddr,
#     6                                                    input   [31 : 0]    pwdata,
#     7                                                    input               psel,
#     8                                                    input               pwrite,
#     9                                                    input               penable,
#     10                                                   output  [31 : 0]    prdata
#     11                                               );
#     12                                                
#     13                                                 reg [3:0]  cntrl = 0; ///   cntrl :  [reg4 reg3 reg2 reg1]
#     14                                                 reg [31:0] reg1  = 0; //    datainput 1
#     15                                                 reg [31:0] reg2  = 0; ///   datainput 2
#     16                                                 reg [31:0] reg3  = 0; ///   datainput 3
#     17                                                 reg [31:0] reg4  = 0; //    datainput 4
#     18                                                   
#     19                                                 reg     [31 : 0]    rdata_tmp = 0;    
#     20                                                   // Set all registers to default values
#     21              1                    ***0***         always @ (posedge pclk) 
#     22                                                     begin
#     23                                                       if( !presetn ) 
#     24                                                       begin
#     25              1                    ***0***                cntrl    <= 4'h0;
#     26              1                    ***0***                reg1     <= 32'h5A5A_5555;
#     27              1                    ***0***                reg2     <= 32'h1234_9876;
#     28              1                    ***0***                reg3     <= 32'hA5A5_0000;
#     29              1                    ***0***                reg4     <= 32'h0000_FFFF;
#     30              1                    ***0***               rdata_tmp <= 32'h00000000;
#     31                                                       end
#     32                                                     ////////////update values of register
#     33                                                       else if( psel && penable && pwrite )
#     34                                                       begin
#     35                                                           case( paddr )
#     36              1                    ***0***                     'h0     : cntrl <= pwdata;
#     37              1                    ***0***                     'h8     : reg2  <= pwdata;
#     38              1                    ***0***                     'hc     : reg3  <= pwdata;
#     39              1                    ***0***                     'h10    : reg4  <= pwdata;
#     40                                                           endcase
#     41                                                       end
#     42                                                       else if (psel && penable && !pwrite )
#     43                                                        begin
#     44                                                          case( paddr )
#     45              1                    ***0***                     'h0     : rdata_tmp <= {28'h0000000,cntrl};
#     46              1                    ***0***                     'h4     : rdata_tmp <= reg1;
#     47              1                    ***0***                     'h8     : rdata_tmp <= reg2;
#     48              1                    ***0***                     'hc     : rdata_tmp <= reg3;
#     49              1                    ***0***                     'h10    : rdata_tmp <= reg4;
#     50              1                    ***0***                     default : rdata_tmp <= 32'h00000000;
#     51                                                           endcase 
#     52                                                        end      
#     53                                                   end   
#     54                                               assign prdata =  rdata_tmp; 
#     55                                               endmodule
# 
# Branch Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Branches                        15         0        15       0.0
# 
# ================================Branch Details================================
# 
# Branch Coverage for file design.v --
# 
# ------------------------------------IF Branch------------------------------------
#     23                                   ***0***     Count coming in to IF
#     23              1                    ***0***             if( !presetn ) 
#     33              1                    ***0***             else if( psel && penable && pwrite )
#     42              1                    ***0***             else if (psel && penable && !pwrite )
#                                          ***0***     All False Count
# Branch totals: 0 hits of 4 branches = 0.0%
# 
# ------------------------------------CASE Branch------------------------------------
#     35                                   ***0***     Count coming in to CASE
#     36              1                    ***0***                     'h0     : cntrl <= pwdata;
#     37              1                    ***0***                     'h8     : reg2  <= pwdata;
#     38              1                    ***0***                     'hc     : reg3  <= pwdata;
#     39              1                    ***0***                     'h10    : reg4  <= pwdata;
#                                          ***0***     All False Count
# Branch totals: 0 hits of 5 branches = 0.0%
# 
# ------------------------------------CASE Branch------------------------------------
#     44                                   ***0***     Count coming in to CASE
#     45              1                    ***0***                     'h0     : rdata_tmp <= {28'h0000000,cntrl};
#     46              1                    ***0***                     'h4     : rdata_tmp <= reg1;
#     47              1                    ***0***                     'h8     : rdata_tmp <= reg2;
#     48              1                    ***0***                     'hc     : rdata_tmp <= reg3;
#     49              1                    ***0***                     'h10    : rdata_tmp <= reg4;
#     50              1                    ***0***                     default : rdata_tmp <= 32'h00000000;
# Branch totals: 0 hits of 6 branches = 0.0%
# 
# 
# Condition Coverage:
#     Enabled Coverage            Active   Covered    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FEC Condition Terms              6         0         6       0.0
# 
# ================================Condition Details================================
# 
# Condition Coverage for file design.v --
# 
# ----------------Focused Condition View-------------------
# Line       33 Item    1  ((psel && penable) && pwrite)
# Condition totals: 0 of 3 input terms covered = 0.0%
# 
#   Input Term   Covered  Reason for no coverage   Hint
#  -----------  --------  -----------------------  --------------
#         psel         N  No hits                  Hit '_0' and '_1'
#      penable         N  No hits                  Hit '_0' and '_1'
#       pwrite         N  No hits                  Hit '_0' and '_1'
# 
#      Rows:       Hits  FEC Target            Non-masking condition(s)      
#  ---------  ---------  --------------------  -------------------------     
#   Row   1:    ***0***  psel_0                -                             
#   Row   2:    ***0***  psel_1                (pwrite && penable)           
#   Row   3:    ***0***  penable_0             psel                          
#   Row   4:    ***0***  penable_1             (pwrite && psel)              
#   Row   5:    ***0***  pwrite_0              (psel && penable)             
#   Row   6:    ***0***  pwrite_1              (psel && penable)             
# 
# ----------------Focused Condition View-------------------
# Line       42 Item    1  ((psel && penable) && ~pwrite)
# Condition totals: 0 of 3 input terms covered = 0.0%
# 
#   Input Term   Covered  Reason for no coverage   Hint
#  -----------  --------  -----------------------  --------------
#         psel         N  No hits                  Hit '_0' and '_1'
#      penable         N  No hits                  Hit '_0' and '_1'
#       pwrite         N  No hits                  Hit '_0' and '_1'
# 
#      Rows:       Hits  FEC Target            Non-masking condition(s)      
#  ---------  ---------  --------------------  -------------------------     
#   Row   1:    ***0***  psel_0                -                             
#   Row   2:    ***0***  psel_1                (~pwrite && penable)          
#   Row   3:    ***0***  penable_0             psel                          
#   Row   4:    ***0***  penable_1             (~pwrite && psel)             
#   Row   5:    ***0***  pwrite_0              (psel && penable)             
#   Row   6:    ***0***  pwrite_1              (psel && penable)             
# 
# 
# Expression Coverage:
#     Enabled Coverage            Active   Covered    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FEC Expression Terms             0         0         0     100.0
# FSM Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FSMs                                                       100.0
#         States                       0         0         0     100.0
#         Transitions                  0         0         0     100.0
# Toggle Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Toggle Bins                    530         0       530       0.0
# 
# ================================Toggle Details================================
# 
# Toggle Coverage for File design.v --
# 
#        Line                                   Node      1H->0L      0L->1H  "Coverage"
# --------------------------------------------------------------------------------------
#           3                                   pclk           0           0        0.00 
#           4                                presetn           0           0        0.00 
#           5                               paddr[9]           0           0        0.00 
#           5                               paddr[8]           0           0        0.00 
#           5                               paddr[7]           0           0        0.00 
#           5                               paddr[6]           0           0        0.00 
#           5                               paddr[5]           0           0        0.00 
#           5                               paddr[4]           0           0        0.00 
#           5                               paddr[3]           0           0        0.00 
#           5                              paddr[31]           0           0        0.00 
#           5                              paddr[30]           0           0        0.00 
#           5                               paddr[2]           0           0        0.00 
#           5                              paddr[29]           0           0        0.00 
#           5                              paddr[28]           0           0        0.00 
#           5                              paddr[27]           0           0        0.00 
#           5                              paddr[26]           0           0        0.00 
#           5                              paddr[25]           0           0        0.00 
#           5                              paddr[24]           0           0        0.00 
#           5                              paddr[23]           0           0        0.00 
#           5                              paddr[22]           0           0        0.00 
#           5                              paddr[21]           0           0        0.00 
#           5                              paddr[20]           0           0        0.00 
#           5                               paddr[1]           0           0        0.00 
#           5                              paddr[19]           0           0        0.00 
#           5                              paddr[18]           0           0        0.00 
#           5                              paddr[17]           0           0        0.00 
#           5                              paddr[16]           0           0        0.00 
#           5                              paddr[15]           0           0        0.00 
#           5                              paddr[14]           0           0        0.00 
#           5                              paddr[13]           0           0        0.00 
#           5                              paddr[12]           0           0        0.00 
#           5                              paddr[11]           0           0        0.00 
#           5                              paddr[10]           0           0        0.00 
#           5                               paddr[0]           0           0        0.00 
#           6                              pwdata[9]           0           0        0.00 
#           6                              pwdata[8]           0           0        0.00 
#           6                              pwdata[7]           0           0        0.00 
#           6                              pwdata[6]           0           0        0.00 
#           6                              pwdata[5]           0           0        0.00 
#           6                              pwdata[4]           0           0        0.00 
#           6                              pwdata[3]           0           0        0.00 
#           6                             pwdata[31]           0           0        0.00 
#           6                             pwdata[30]           0           0        0.00 
#           6                              pwdata[2]           0           0        0.00 
#           6                             pwdata[29]           0           0        0.00 
#           6                             pwdata[28]           0           0        0.00 
#           6                             pwdata[27]           0           0        0.00 
#           6                             pwdata[26]           0           0        0.00 
#           6                             pwdata[25]           0           0        0.00 
#           6                             pwdata[24]           0           0        0.00 
#           6                             pwdata[23]           0           0        0.00 
#           6                             pwdata[22]           0           0        0.00 
#           6                             pwdata[21]           0           0        0.00 
#           6                             pwdata[20]           0           0        0.00 
#           6                              pwdata[1]           0           0        0.00 
#           6                             pwdata[19]           0           0        0.00 
#           6                             pwdata[18]           0           0        0.00 
#           6                             pwdata[17]           0           0        0.00 
#           6                             pwdata[16]           0           0        0.00 
#           6                             pwdata[15]           0           0        0.00 
#           6                             pwdata[14]           0           0        0.00 
#           6                             pwdata[13]           0           0        0.00 
#           6                             pwdata[12]           0           0        0.00 
#           6                             pwdata[11]           0           0        0.00 
#           6                             pwdata[10]           0           0        0.00 
#           6                              pwdata[0]           0           0        0.00 
#           7                                   psel           0           0        0.00 
#           8                                 pwrite           0           0        0.00 
#           9                                penable           0           0        0.00 
#          10                              prdata[9]           0           0        0.00 
#          10                              prdata[8]           0           0        0.00 
#          10                              prdata[7]           0           0        0.00 
#          10                              prdata[6]           0           0        0.00 
#          10                              prdata[5]           0           0        0.00 
#          10                              prdata[4]           0           0        0.00 
#          10                              prdata[3]           0           0        0.00 
#          10                             prdata[31]           0           0        0.00 
#          10                             prdata[30]           0           0        0.00 
#          10                              prdata[2]           0           0        0.00 
#          10                             prdata[29]           0           0        0.00 
#          10                             prdata[28]           0           0        0.00 
#          10                             prdata[27]           0           0        0.00 
#          10                             prdata[26]           0           0        0.00 
#          10                             prdata[25]           0           0        0.00 
#          10                             prdata[24]           0           0        0.00 
#          10                             prdata[23]           0           0        0.00 
#          10                             prdata[22]           0           0        0.00 
#          10                             prdata[21]           0           0        0.00 
#          10                             prdata[20]           0           0        0.00 
#          10                              prdata[1]           0           0        0.00 
#          10                             prdata[19]           0           0        0.00 
#          10                             prdata[18]           0           0        0.00 
#          10                             prdata[17]           0           0        0.00 
#          10                             prdata[16]           0           0        0.00 
#          10                             prdata[15]           0           0        0.00 
#          10                             prdata[14]           0           0        0.00 
#          10                             prdata[13]           0           0        0.00 
#          10                             prdata[12]           0           0        0.00 
#          10                             prdata[11]           0           0        0.00 
#          10                             prdata[10]           0           0        0.00 
#          10                              prdata[0]           0           0        0.00 
#          13                               cntrl[3]           0           0        0.00 
#          13                               cntrl[2]           0           0        0.00 
#          13                               cntrl[1]           0           0        0.00 
#          13                               cntrl[0]           0           0        0.00 
#          14                                reg1[9]           0           0        0.00 
#          14                                reg1[8]           0           0        0.00 
#          14                                reg1[7]           0           0        0.00 
#          14                                reg1[6]           0           0        0.00 
#          14                                reg1[5]           0           0        0.00 
#          14                                reg1[4]           0           0        0.00 
#          14                                reg1[3]           0           0        0.00 
#          14                               reg1[31]           0           0        0.00 
#          14                               reg1[30]           0           0        0.00 
#          14                                reg1[2]           0           0        0.00 
#          14                               reg1[29]           0           0        0.00 
#          14                               reg1[28]           0           0        0.00 
#          14                               reg1[27]           0           0        0.00 
#          14                               reg1[26]           0           0        0.00 
#          14                               reg1[25]           0           0        0.00 
#          14                               reg1[24]           0           0        0.00 
#          14                               reg1[23]           0           0        0.00 
#          14                               reg1[22]           0           0        0.00 
#          14                               reg1[21]           0           0        0.00 
#          14                               reg1[20]           0           0        0.00 
#          14                                reg1[1]           0           0        0.00 
#          14                               reg1[19]           0           0        0.00 
#          14                               reg1[18]           0           0        0.00 
#          14                               reg1[17]           0           0        0.00 
#          14                               reg1[16]           0           0        0.00 
#          14                               reg1[15]           0           0        0.00 
#          14                               reg1[14]           0           0        0.00 
#          14                               reg1[13]           0           0        0.00 
#          14                               reg1[12]           0           0        0.00 
#          14                               reg1[11]           0           0        0.00 
#          14                               reg1[10]           0           0        0.00 
#          14                                reg1[0]           0           0        0.00 
#          15                                reg2[9]           0           0        0.00 
#          15                                reg2[8]           0           0        0.00 
#          15                                reg2[7]           0           0        0.00 
#          15                                reg2[6]           0           0        0.00 
#          15                                reg2[5]           0           0        0.00 
#          15                                reg2[4]           0           0        0.00 
#          15                                reg2[3]           0           0        0.00 
#          15                               reg2[31]           0           0        0.00 
#          15                               reg2[30]           0           0        0.00 
#          15                                reg2[2]           0           0        0.00 
#          15                               reg2[29]           0           0        0.00 
#          15                               reg2[28]           0           0        0.00 
#          15                               reg2[27]           0           0        0.00 
#          15                               reg2[26]           0           0        0.00 
#          15                               reg2[25]           0           0        0.00 
#          15                               reg2[24]           0           0        0.00 
#          15                               reg2[23]           0           0        0.00 
#          15                               reg2[22]           0           0        0.00 
#          15                               reg2[21]           0           0        0.00 
#          15                               reg2[20]           0           0        0.00 
#          15                                reg2[1]           0           0        0.00 
#          15                               reg2[19]           0           0        0.00 
#          15                               reg2[18]           0           0        0.00 
#          15                               reg2[17]           0           0        0.00 
#          15                               reg2[16]           0           0        0.00 
#          15                               reg2[15]           0           0        0.00 
#          15                               reg2[14]           0           0        0.00 
#          15                               reg2[13]           0           0        0.00 
#          15                               reg2[12]           0           0        0.00 
#          15                               reg2[11]           0           0        0.00 
#          15                               reg2[10]           0           0        0.00 
#          15                                reg2[0]           0           0        0.00 
#          16                                reg3[9]           0           0        0.00 
#          16                                reg3[8]           0           0        0.00 
#          16                                reg3[7]           0           0        0.00 
#          16                                reg3[6]           0           0        0.00 
#          16                                reg3[5]           0           0        0.00 
#          16                                reg3[4]           0           0        0.00 
#          16                                reg3[3]           0           0        0.00 
#          16                               reg3[31]           0           0        0.00 
#          16                               reg3[30]           0           0        0.00 
#          16                                reg3[2]           0           0        0.00 
#          16                               reg3[29]           0           0        0.00 
#          16                               reg3[28]           0           0        0.00 
#          16                               reg3[27]           0           0        0.00 
#          16                               reg3[26]           0           0        0.00 
#          16                               reg3[25]           0           0        0.00 
#          16                               reg3[24]           0           0        0.00 
#          16                               reg3[23]           0           0        0.00 
#          16                               reg3[22]           0           0        0.00 
#          16                               reg3[21]           0           0        0.00 
#          16                               reg3[20]           0           0        0.00 
#          16                                reg3[1]           0           0        0.00 
#          16                               reg3[19]           0           0        0.00 
#          16                               reg3[18]           0           0        0.00 
#          16                               reg3[17]           0           0        0.00 
#          16                               reg3[16]           0           0        0.00 
#          16                               reg3[15]           0           0        0.00 
#          16                               reg3[14]           0           0        0.00 
#          16                               reg3[13]           0           0        0.00 
#          16                               reg3[12]           0           0        0.00 
#          16                               reg3[11]           0           0        0.00 
#          16                               reg3[10]           0           0        0.00 
#          16                                reg3[0]           0           0        0.00 
#          17                                reg4[9]           0           0        0.00 
#          17                                reg4[8]           0           0        0.00 
#          17                                reg4[7]           0           0        0.00 
#          17                                reg4[6]           0           0        0.00 
#          17                                reg4[5]           0           0        0.00 
#          17                                reg4[4]           0           0        0.00 
#          17                                reg4[3]           0           0        0.00 
#          17                               reg4[31]           0           0        0.00 
#          17                               reg4[30]           0           0        0.00 
#          17                                reg4[2]           0           0        0.00 
#          17                               reg4[29]           0           0        0.00 
#          17                               reg4[28]           0           0        0.00 
#          17                               reg4[27]           0           0        0.00 
#          17                               reg4[26]           0           0        0.00 
#          17                               reg4[25]           0           0        0.00 
#          17                               reg4[24]           0           0        0.00 
#          17                               reg4[23]           0           0        0.00 
#          17                               reg4[22]           0           0        0.00 
#          17                               reg4[21]           0           0        0.00 
#          17                               reg4[20]           0           0        0.00 
#          17                                reg4[1]           0           0        0.00 
#          17                               reg4[19]           0           0        0.00 
#          17                               reg4[18]           0           0        0.00 
#          17                               reg4[17]           0           0        0.00 
#          17                               reg4[16]           0           0        0.00 
#          17                               reg4[15]           0           0        0.00 
#          17                               reg4[14]           0           0        0.00 
#          17                               reg4[13]           0           0        0.00 
#          17                               reg4[12]           0           0        0.00 
#          17                               reg4[11]           0           0        0.00 
#          17                               reg4[10]           0           0        0.00 
#          17                                reg4[0]           0           0        0.00 
#          19                           rdata_tmp[9]           0           0        0.00 
#          19                           rdata_tmp[8]           0           0        0.00 
#          19                           rdata_tmp[7]           0           0        0.00 
#          19                           rdata_tmp[6]           0           0        0.00 
#          19                           rdata_tmp[5]           0           0        0.00 
#          19                           rdata_tmp[4]           0           0        0.00 
#          19                           rdata_tmp[3]           0           0        0.00 
#          19                          rdata_tmp[31]           0           0        0.00 
#          19                          rdata_tmp[30]           0           0        0.00 
#          19                           rdata_tmp[2]           0           0        0.00 
#          19                          rdata_tmp[29]           0           0        0.00 
#          19                          rdata_tmp[28]           0           0        0.00 
#          19                          rdata_tmp[27]           0           0        0.00 
#          19                          rdata_tmp[26]           0           0        0.00 
#          19                          rdata_tmp[25]           0           0        0.00 
#          19                          rdata_tmp[24]           0           0        0.00 
#          19                          rdata_tmp[23]           0           0        0.00 
#          19                          rdata_tmp[22]           0           0        0.00 
#          19                          rdata_tmp[21]           0           0        0.00 
#          19                          rdata_tmp[20]           0           0        0.00 
#          19                           rdata_tmp[1]           0           0        0.00 
#          19                          rdata_tmp[19]           0           0        0.00 
#          19                          rdata_tmp[18]           0           0        0.00 
#          19                          rdata_tmp[17]           0           0        0.00 
#          19                          rdata_tmp[16]           0           0        0.00 
#          19                          rdata_tmp[15]           0           0        0.00 
#          19                          rdata_tmp[14]           0           0        0.00 
#          19                          rdata_tmp[13]           0           0        0.00 
#          19                          rdata_tmp[12]           0           0        0.00 
#          19                          rdata_tmp[11]           0           0        0.00 
#          19                          rdata_tmp[10]           0           0        0.00 
#          19                           rdata_tmp[0]           0           0        0.00 
# 
# Total Node Count     =        265 
# Toggled Node Count   =          0 
# Untoggled Node Count =        265 
# 
# Toggle Coverage      =        0.0% (0 of 530 bins)
# 
# =================================================================================
# === File: driver.sv
# =================================================================================
# Statement Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Stmts                           43         0        43       0.0
# 
# ================================Statement Details================================
# 
# Statement Coverage for file driver.sv --
# 
#     1                                                class driver extends uvm_driver#(seq_item);
#     2               1                    ***0***      `uvm_component_utils(driver)
#     2               2                    ***0***     
#     2               3                    ***0***     
#     3                                                  seq_item tr;
#     4                                                  virtual top_if vif;
#     5                                                 
#     6                                                  function new(string path = "driver", uvm_component parent = null);
#     7               1                    ***0***         super.new(path,parent);
#     8                                                  endfunction
#     9                                                 
#     10                                                 virtual function void build_phase(uvm_phase phase);
#     11              1                    ***0***       super.build_phase(phase);
#     12              1                    ***0***         tr = seq_item::type_id::create("tr",this);
#     13                                                   if(!uvm_config_db#(virtual top_if)::get(this,"","vif",vif))
#     14              1                    ***0***           `uvm_error("drv","Unable to access Interface");
#     15                                                 endfunction
#     16                                                 
#     17                                                 ///////////////main task of driver
#     18                                                 virtual task run_phase(uvm_phase phase);
#     19              1                    ***0***       tr = seq_item::type_id::create("tr");
#     20              1                    ***0***       vif.psel    <= 1'b0;
#     21              1                    ***0***         vif.penable <= 1'b0;
#     22              1                    ***0***         vif.pwrite  <= 1'b0;
#     23              1                    ***0***         vif.paddr   <= 32'h0;
#     24              1                    ***0***         vif.pwdata  <= 32'h0;
#     25                                               
#     26              1                    ***0***       forever begin
#     27              1                    ***0***       seq_item_port.get_next_item(tr);
#     28              1                    ***0***       drive();
#     29              1                    ***0***       seq_item_port.item_done();
#     30              1                    ***0***       $display("-----------DRIVER----------"); 
#     31                                                 end
#     32                                                 endtask
#     33                                                 
#     34                                                 
#     35                                                 //////////////drive DUT
#     36                                                 task drive();
#     37                                                // if(vif.rst == 1'b1)begin
#     38                                                if(tr.pwrite == 1'b1)
#     39                                                 begin 
#     40              1                    ***0***       @(posedge vif.clk);
#     41              1                    ***0***       vif.rst <= 1'b1;
#     42              1                    ***0***          vif.paddr <= tr.paddr;
#     43              1                    ***0***          vif.pwrite <= 1'b1;
#     44              1                    ***0***          vif.pwdata <= tr.pwdata;
#     45              1                    ***0***          vif.psel <= 1'b1;
#     46              1                    ***0***          repeat(2)@(posedge vif.clk);
#     46              2                    ***0***     
#     47              1                    ***0***          vif.penable <= 1'b1; 
#     48              1                    ***0***          `uvm_info("DRV", $sformatf("Data Write -> Wdata : %0h",vif.pwdata),UVM_NONE);
#     49              1                    ***0***          @(posedge vif.clk);
#     50              1                    ***0***          vif.psel <= 1'b0;
#     51              1                    ***0***          vif.penable <=1'b0;
#     52                                                  end
#     53                                                else
#     54                                                 begin
#     55              1                    ***0***          @(posedge vif.clk);
#     56              1                    ***0***          vif.pwrite <= 1'b0;
#     57              1                    ***0***          vif.paddr <= tr.paddr;
#     58              1                    ***0***          vif.psel <= 1'b1;
#     59              1                    ***0***          repeat(2)@(posedge vif.clk);
#     59              2                    ***0***     
#     60              1                    ***0***          vif.penable <= 1'b1; 
#     61              1                    ***0***          `uvm_info("DRV", $sformatf("Data READ -> read data : %0h",vif.prdata),UVM_NONE);
#     62              1                    ***0***          @(posedge vif.clk);
#     63              1                    ***0***          vif.psel <= 1'b0;
#     64              1                    ***0***          vif.penable <=1'b0;
#     65              1                    ***0***          tr.prdata = vif.prdata;
#     66                                                 end
#     67                                                 endtask
#     68                                               endclass
# 
# Branch Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Branches                        10         0        10       0.0
# 
# ================================Branch Details================================
# 
# Branch Coverage for file driver.sv --
# 
# ------------------------------------IF Branch------------------------------------
#     13                                   ***0***     Count coming in to IF
#     13              1                    ***0***         if(!uvm_config_db#(virtual top_if)::get(this,"","vif",vif))
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     14                                   ***0***     Count coming in to IF
#     14              1                    ***0***           `uvm_error("drv","Unable to access Interface");
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     38                                   ***0***     Count coming in to IF
#     38              1                    ***0***      if(tr.pwrite == 1'b1)
#     53              1                    ***0***      else
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     48                                   ***0***     Count coming in to IF
#     48              1                    ***0***          `uvm_info("DRV", $sformatf("Data Write -> Wdata : %0h",vif.pwdata),UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     61                                   ***0***     Count coming in to IF
#     61              1                    ***0***          `uvm_info("DRV", $sformatf("Data READ -> read data : %0h",vif.prdata),UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# 
# Condition Coverage:
#     Enabled Coverage            Active   Covered    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FEC Condition Terms              0         0         0     100.0
# Expression Coverage:
#     Enabled Coverage            Active   Covered    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FEC Expression Terms             0         0         0     100.0
# FSM Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FSMs                                                       100.0
#         States                       0         0         0     100.0
#         Transitions                  0         0         0     100.0
# Toggle Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Toggle Bins                      0         0         0     100.0
# 
# ================================Toggle Details================================
# 
# Toggle Coverage for File driver.sv --
# 
#        Line                                   Node      1H->0L      0L->1H  "Coverage"
# --------------------------------------------------------------------------------------
# 
# Total Node Count     =          0 
# Toggled Node Count   =          0 
# Untoggled Node Count =          0 
# 
# Toggle Coverage      =      100.0% (0 of 0 bins)
# 
# =================================================================================
# === File: environment.sv
# =================================================================================
# Statement Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Stmts                           17         0        17       0.0
# 
# ================================Statement Details================================
# 
# Statement Coverage for file environment.sv --
# 
#     1                                                class environment extends uvm_env;
#     2                                                  agent agent_inst;
#     3                                                  reg_block regmodel; 
#     4                                                  top_adapter adapter_inst;
#     5                                                  scoreboard scb;
#     6               1                    ***0***      `uvm_component_utils(environment)
#     6               2                    ***0***     
#     6               3                    ***0***     
#     7                                                
#     8                                                  function new(string name = "environment", uvm_component parent);
#     9               1                    ***0***       super.new(name, parent);
#     10                                                 endfunction : new
#     11                                               
#     12                                                 // build_phase - create the components
#     13                                                 function void build_phase(uvm_phase phase);
#     14              1                    ***0***       super.build_phase(phase);
#     15              1                    ***0***         agent_inst = agent::type_id::create("agent_inst", this);
#     16              1                    ***0***         regmodel = reg_block::type_id::create("regmodel", this);
#     17              1                    ***0***         adapter_inst = top_adapter::type_id::create("adapter_inst",, get_full_name());
#     18              1                    ***0***         scb = scoreboard::type_id::create("scb", this);
#     19              1                    ***0***         regmodel.configure(null,"");
#     20              1                    ***0***         regmodel.build();
#     21              1                    ***0***         regmodel.lock_model();
#     22                                                 endfunction
#     23                                               
#     24                                               
#     25                                                 function void connect_phase(uvm_phase phase);
#     26              1                    ***0***       super.connect_phase(phase);
#     27              1                    ***0***         agent_inst.mon.mon_ap.connect(scb.received_value); 
#     28              1                    ***0***       regmodel.default_map.set_sequencer( .sequencer(agent_inst.seqr), .adapter(adapter_inst) );
#     29              1                    ***0***       regmodel.default_map.set_base_addr(0);
#     30              1                    ***0***      regmodel.default_map.set_auto_predict(1);    
#     31                                                 endfunction
#     32                                               endclass
# 
# Branch Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Branches                         0         0         0     100.0
# Condition Coverage:
#     Enabled Coverage            Active   Covered    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FEC Condition Terms              0         0         0     100.0
# Expression Coverage:
#     Enabled Coverage            Active   Covered    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FEC Expression Terms             0         0         0     100.0
# FSM Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FSMs                                                       100.0
#         States                       0         0         0     100.0
#         Transitions                  0         0         0     100.0
# Toggle Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Toggle Bins                      0         0         0     100.0
# 
# ================================Toggle Details================================
# 
# Toggle Coverage for File environment.sv --
# 
#        Line                                   Node      1H->0L      0L->1H  "Coverage"
# --------------------------------------------------------------------------------------
# 
# Total Node Count     =          0 
# Toggled Node Count   =          0 
# Untoggled Node Count =          0 
# 
# Toggle Coverage      =      100.0% (0 of 0 bins)
# 
# =================================================================================
# === File: interface.sv
# =================================================================================
# Statement Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Stmts                            0         0         0     100.0
# Branch Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Branches                         0         0         0     100.0
# Condition Coverage:
#     Enabled Coverage            Active   Covered    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FEC Condition Terms              0         0         0     100.0
# Expression Coverage:
#     Enabled Coverage            Active   Covered    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FEC Expression Terms             0         0         0     100.0
# FSM Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FSMs                                                       100.0
#         States                       0         0         0     100.0
#         Transitions                  0         0         0     100.0
# Toggle Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Toggle Bins                    202         0       202       0.0
# 
# ================================Toggle Details================================
# 
# Toggle Coverage for File interface.sv --
# 
#        Line                                   Node      1H->0L      0L->1H  "Coverage"
# --------------------------------------------------------------------------------------
#           1                                    rst           0           0        0.00 
#           1                                    clk           0           0        0.00 
#           3                                 pwrite           0           0        0.00 
#           4                                   psel           0           0        0.00 
#           5                                penable           0           0        0.00 
#           6                               paddr[9]           0           0        0.00 
#           6                               paddr[8]           0           0        0.00 
#           6                               paddr[7]           0           0        0.00 
#           6                               paddr[6]           0           0        0.00 
#           6                               paddr[5]           0           0        0.00 
#           6                               paddr[4]           0           0        0.00 
#           6                               paddr[3]           0           0        0.00 
#           6                              paddr[31]           0           0        0.00 
#           6                              paddr[30]           0           0        0.00 
#           6                               paddr[2]           0           0        0.00 
#           6                              paddr[29]           0           0        0.00 
#           6                              paddr[28]           0           0        0.00 
#           6                              paddr[27]           0           0        0.00 
#           6                              paddr[26]           0           0        0.00 
#           6                              paddr[25]           0           0        0.00 
#           6                              paddr[24]           0           0        0.00 
#           6                              paddr[23]           0           0        0.00 
#           6                              paddr[22]           0           0        0.00 
#           6                              paddr[21]           0           0        0.00 
#           6                              paddr[20]           0           0        0.00 
#           6                               paddr[1]           0           0        0.00 
#           6                              paddr[19]           0           0        0.00 
#           6                              paddr[18]           0           0        0.00 
#           6                              paddr[17]           0           0        0.00 
#           6                              paddr[16]           0           0        0.00 
#           6                              paddr[15]           0           0        0.00 
#           6                              paddr[14]           0           0        0.00 
#           6                              paddr[13]           0           0        0.00 
#           6                              paddr[12]           0           0        0.00 
#           6                              paddr[11]           0           0        0.00 
#           6                              paddr[10]           0           0        0.00 
#           6                               paddr[0]           0           0        0.00 
#           7                              pwdata[9]           0           0        0.00 
#           7                              pwdata[8]           0           0        0.00 
#           7                              pwdata[7]           0           0        0.00 
#           7                              pwdata[6]           0           0        0.00 
#           7                              pwdata[5]           0           0        0.00 
#           7                              pwdata[4]           0           0        0.00 
#           7                              pwdata[3]           0           0        0.00 
#           7                             pwdata[31]           0           0        0.00 
#           7                             pwdata[30]           0           0        0.00 
#           7                              pwdata[2]           0           0        0.00 
#           7                             pwdata[29]           0           0        0.00 
#           7                             pwdata[28]           0           0        0.00 
#           7                             pwdata[27]           0           0        0.00 
#           7                             pwdata[26]           0           0        0.00 
#           7                             pwdata[25]           0           0        0.00 
#           7                             pwdata[24]           0           0        0.00 
#           7                             pwdata[23]           0           0        0.00 
#           7                             pwdata[22]           0           0        0.00 
#           7                             pwdata[21]           0           0        0.00 
#           7                             pwdata[20]           0           0        0.00 
#           7                              pwdata[1]           0           0        0.00 
#           7                             pwdata[19]           0           0        0.00 
#           7                             pwdata[18]           0           0        0.00 
#           7                             pwdata[17]           0           0        0.00 
#           7                             pwdata[16]           0           0        0.00 
#           7                             pwdata[15]           0           0        0.00 
#           7                             pwdata[14]           0           0        0.00 
#           7                             pwdata[13]           0           0        0.00 
#           7                             pwdata[12]           0           0        0.00 
#           7                             pwdata[11]           0           0        0.00 
#           7                             pwdata[10]           0           0        0.00 
#           7                              pwdata[0]           0           0        0.00 
#           8                              prdata[9]           0           0        0.00 
#           8                              prdata[8]           0           0        0.00 
#           8                              prdata[7]           0           0        0.00 
#           8                              prdata[6]           0           0        0.00 
#           8                              prdata[5]           0           0        0.00 
#           8                              prdata[4]           0           0        0.00 
#           8                              prdata[3]           0           0        0.00 
#           8                             prdata[31]           0           0        0.00 
#           8                             prdata[30]           0           0        0.00 
#           8                              prdata[2]           0           0        0.00 
#           8                             prdata[29]           0           0        0.00 
#           8                             prdata[28]           0           0        0.00 
#           8                             prdata[27]           0           0        0.00 
#           8                             prdata[26]           0           0        0.00 
#           8                             prdata[25]           0           0        0.00 
#           8                             prdata[24]           0           0        0.00 
#           8                             prdata[23]           0           0        0.00 
#           8                             prdata[22]           0           0        0.00 
#           8                             prdata[21]           0           0        0.00 
#           8                             prdata[20]           0           0        0.00 
#           8                              prdata[1]           0           0        0.00 
#           8                             prdata[19]           0           0        0.00 
#           8                             prdata[18]           0           0        0.00 
#           8                             prdata[17]           0           0        0.00 
#           8                             prdata[16]           0           0        0.00 
#           8                             prdata[15]           0           0        0.00 
#           8                             prdata[14]           0           0        0.00 
#           8                             prdata[13]           0           0        0.00 
#           8                             prdata[12]           0           0        0.00 
#           8                             prdata[11]           0           0        0.00 
#           8                             prdata[10]           0           0        0.00 
#           8                              prdata[0]           0           0        0.00 
# 
# Total Node Count     =        101 
# Toggled Node Count   =          0 
# Untoggled Node Count =        101 
# 
# Toggle Coverage      =        0.0% (0 of 202 bins)
# 
# =================================================================================
# === File: monitor.sv
# =================================================================================
# Statement Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Stmts                           18         0        18       0.0
# 
# ================================Statement Details================================
# 
# Statement Coverage for file monitor.sv --
# 
#     1                                                class monitor extends uvm_monitor;
#     2               1                    ***0***       `uvm_component_utils(monitor)
#     2               2                    ***0***     
#     2               3                    ***0***     
#     3                                                  uvm_analysis_port #(seq_item) mon_ap;
#     4                                                  virtual top_if vif;
#     5                                                  seq_item tr;
#     6                                                  
#     7                                                  function new(string name = "monitor", uvm_component parent);
#     8               1                    ***0***         super.new(name,parent);
#     9                                                  endfunction
#     10                                                 
#     11                                                 virtual function void build_phase(uvm_phase phase);
#     12              1                    ***0***         super.build_phase(phase);
#     13              1                    ***0***         mon_ap = new("mon_ap",this);
#     14              1                    ***0***         if(! uvm_config_db#(virtual top_if)::get (this, "", "vif", vif))`uvm_error("MON", "Error getting Interface Handle");
#     15                                                 endfunction
#     16                                                
#     17                                                 /*virtual task run_phase(uvm_phase phase);
#     18                                                   forever begin
#     19                                                     repeat(3)@(posedge vif.clk);
#     20                                                     $display("-----MONITOR BEGIN-----");
#     21                                               	  if(vif.psel && vif.penable && vif.rst)begin
#     22                                                       tr = seq_item::type_id::create("seq_item");
#     23                                                       tr.paddr  =  vif.paddr;
#     24                                                       tr.pwrite =  vif.pwrite;
#     25                                                        if(vif.pwrite)begin
#     26                                                	      tr.pwdata = vif.pwdata;
#     27                                                         @(posedge vif.clk);
#     28                                                         `uvm_info("MON", $sformatf("Mode : Write WDATA : %0d ADDR : %0d", vif.pwdata, vif.paddr), UVM_NONE);
#     29                                                          end
#     30                                                      else begin 
#     31                                                         @(posedge vif.clk);
#     32                                                         tr.prdata = vif.prdata;
#     33                                                         `uvm_info("MON", $sformatf("Mode : Write RDATA : %0d ADDR : %0d", vif.prdata, vif.paddr), UVM_NONE);
#     34                                                         end
#     35                                                         mon_ap.write(tr);
#     36                                                         end
#     37                                                      end
#     38                                                     $display("-----MONITOR END------");
#     39                                                 endtask*/
#     40                                               
#     41                                               virtual task run_phase(uvm_phase phase);
#     42              1                    ***0***         tr = seq_item::type_id::create("tr");
#     43              1                    ***0***         forever begin
#     44                                                     //  repeat(3) @(vif.cb_mon);
#     45              1                    ***0***           @(posedge vif.clk);
#     46              1                    ***0***           $display("-------------monitor begin----------");
#     47              1                    ***0***           tr.paddr    =   vif.paddr;
#     48              1                    ***0***           tr.pwrite   =   vif.pwrite;
#     49              1                    ***0***           tr.psel     =   vif.psel;
#     50              1                    ***0***           tr.penable  =   vif.penable;
#     51              1                    ***0***           tr.pwdata   =   vif.pwdata;
#     52              1                    ***0***           tr.prdata   =   vif.prdata;
#     53                                               
#     54              1                    ***0***           mon_ap.write(tr);
#     55                                               
#     56                                                   end
#     57                                                 endtask
#     58                                               
#     59                                               endclass
# 
# Branch Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Branches                         4         0         4       0.0
# 
# ================================Branch Details================================
# 
# Branch Coverage for file monitor.sv --
# 
# ------------------------------------IF Branch------------------------------------
#     14                                   ***0***     Count coming in to IF
#     14              1                    ***0***         if(! uvm_config_db#(virtual top_if)::get (this, "", "vif", vif))`uvm_error("MON", "Error getting Interface Handle");
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     14                                   ***0***     Count coming in to IF
#     14              2                    ***0***         if(! uvm_config_db#(virtual top_if)::get (this, "", "vif", vif))`uvm_error("MON", "Error getting Interface Handle");
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# 
# Condition Coverage:
#     Enabled Coverage            Active   Covered    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FEC Condition Terms              0         0         0     100.0
# Expression Coverage:
#     Enabled Coverage            Active   Covered    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FEC Expression Terms             0         0         0     100.0
# FSM Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FSMs                                                       100.0
#         States                       0         0         0     100.0
#         Transitions                  0         0         0     100.0
# Toggle Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Toggle Bins                      0         0         0     100.0
# 
# ================================Toggle Details================================
# 
# Toggle Coverage for File monitor.sv --
# 
#        Line                                   Node      1H->0L      0L->1H  "Coverage"
# --------------------------------------------------------------------------------------
# 
# Total Node Count     =          0 
# Toggled Node Count   =          0 
# Untoggled Node Count =          0 
# 
# Toggle Coverage      =      100.0% (0 of 0 bins)
# 
# =================================================================================
# === File: reg_block.sv
# =================================================================================
# Statement Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Stmts                          125         0       125       0.0
# 
# ================================Statement Details================================
# 
# Statement Coverage for file reg_block.sv --
# 
#     1                                                class cntrl_field extends uvm_reg;
#     2               1                    ***0***       `uvm_object_utils(cntrl_field)
#     2               2                    ***0***     
#     2               3                    ***0***     
#     2               4                    ***0***     
#     2               5                    ***0***     
#     2               6                    ***0***     
#     2               7                    ***0***     
#     2               8                    ***0***     
#     2               9                    ***0***     
#     2              10                    ***0***     
#     3                                                
#     4                                                  rand uvm_reg_field cntrl;
#     5                                                
#     6                                                  covergroup cntrl_cov;
#     7                                                    option.per_instance = 1;
#     8                                                    coverpoint cntrl.value[3:0] {
#     9                                                     bins val = {[0:1]};}
#     10                                                 endgroup
#     11                                                 
#     12                                                 function new (string name = "cntrl");
#     13              1                    ***0***         super.new(name,4,UVM_CVR_FIELD_VALS);
#     14                                                   if(has_coverage(UVM_CVR_FIELD_VALS))
#     15              1                    ***0***           cntrl_cov = new();
#     16                                                 endfunction
#     17                                               
#     18                                                 ////////////////////////////// implementation of sample and sample_Values
#     19                                                 virtual function void sample(uvm_reg_data_t data,uvm_reg_data_t byte_en,bit is_read,uvm_reg_map map);
#     20              1                    ***0***        cntrl_cov.sample();
#     21                                                 endfunction
#     22                                                 
#     23                                                 virtual function void sample_values();
#     24              1                    ***0***        super.sample_values();
#     25              1                    ***0***        cntrl_cov.sample();
#     26                                                 endfunction
#     27                                                 
#     28                                                 function void build;
#     29              1                    ***0***         cntrl = uvm_reg_field::type_id::create("cntrl");
#     30              1                    ***0***         cntrl.configure(this, 4, 0, "RW", 0, 0, 1, 1, 1);
#     31                                                 endfunction
#     32                                               endclass
#     33                                               
#     34                                               class reg1_field extends uvm_reg;
#     35              1                    ***0***       `uvm_object_utils(reg1_field)
#     35              2                    ***0***     
#     35              3                    ***0***     
#     35              4                    ***0***     
#     35              5                    ***0***     
#     35              6                    ***0***     
#     35              7                    ***0***     
#     35              8                    ***0***     
#     35              9                    ***0***     
#     35             10                    ***0***     
#     36                                               
#     37                                                 rand uvm_reg_field reg1;
#     38                                                 covergroup reg1_cov;
#     39                                                   option.per_instance = 1;
#     40                                                 
#     41                                                 coverpoint reg1.value[31:0] {
#     42                                                    bins val = {[0:32'h1FFF_FFFF]};
#     43                                                   }
#     44                                                 endgroup
#     45                                                 
#     46                                                 function new (string name = "reg1");
#     47              1                    ***0***         super.new(name,32,UVM_CVR_FIELD_VALS);
#     48                                                   if(has_coverage(UVM_CVR_FIELD_VALS))
#     49              1                    ***0***           reg1_cov = new();
#     50                                                 endfunction
#     51                                               
#     52                                                 ////////////////////////////// implementation of sample and sample_Values
#     53                                                 virtual function void sample(uvm_reg_data_t data,uvm_reg_data_t byte_en,bit is_read,uvm_reg_map map);
#     54              1                    ***0***        reg1_cov.sample();
#     55                                                 endfunction
#     56                                                 
#     57                                                 virtual function void sample_values();
#     58              1                    ***0***        super.sample_values();
#     59              1                    ***0***        reg1_cov.sample();
#     60                                                 endfunction
#     61                                                 
#     62                                                 function void build;
#     63              1                    ***0***         reg1 = uvm_reg_field::type_id::create("reg1");
#     64              1                    ***0***         reg1.configure(this, 32, 0, "RW", 0, 32'hA5A5_0000, 1, 1, 1);
#     65                                                 endfunction
#     66                                               endclass
#     67                                               
#     68                                               class reg2_field extends uvm_reg;
#     69              1                    ***0***       `uvm_object_utils(reg2_field)
#     69              2                    ***0***     
#     69              3                    ***0***     
#     69              4                    ***0***     
#     69              5                    ***0***     
#     69              6                    ***0***     
#     69              7                    ***0***     
#     69              8                    ***0***     
#     69              9                    ***0***     
#     69             10                    ***0***     
#     70                                               
#     71                                                 rand uvm_reg_field reg2;
#     72                                                 covergroup reg2_cov;
#     73                                                   option.per_instance = 1;
#     74                                                   coverpoint reg2.value[31:0] {
#     75                                                    bins val  = {[0:32'h1FFF_FFFF]};
#     76                                                 }
#     77                                                 endgroup
#     78                                                 
#     79                                                 function new (string name = "reg2");
#     80              1                    ***0***         super.new(name,32,UVM_CVR_FIELD_VALS);
#     81                                                   if(has_coverage(UVM_CVR_FIELD_VALS))
#     82              1                    ***0***           reg2_cov = new();
#     83                                                 endfunction
#     84                                               
#     85                                                 ////////////////////////////// implementation of sample and sample_Values
#     86                                                 virtual function void sample(uvm_reg_data_t data,uvm_reg_data_t byte_en,bit is_read,uvm_reg_map map);
#     87              1                    ***0***        reg2_cov.sample();
#     88                                                 endfunction
#     89                                                 
#     90                                                 virtual function void sample_values();
#     91              1                    ***0***        super.sample_values();
#     92              1                    ***0***        reg2_cov.sample();
#     93                                                 endfunction
#     94                                                 
#     95                                                 function void build;
#     96              1                    ***0***         reg2 = uvm_reg_field :: type_id :: create("reg2");
#     97              1                    ***0***         reg2.configure(this, 32, 0, "RW", 0,32'h1234_9876, 1, 1, 1);
#     98                                                 endfunction
#     99                                               endclass
#     100                                              
#     101                                              class reg3_field extends uvm_reg;
#     102             1                    ***0***       `uvm_object_utils(reg3_field)
#     102             2                    ***0***     
#     102             3                    ***0***     
#     102             4                    ***0***     
#     102             5                    ***0***     
#     102             6                    ***0***     
#     102             7                    ***0***     
#     102             8                    ***0***     
#     102             9                    ***0***     
#     102            10                    ***0***     
#     103                                              
#     104                                                rand uvm_reg_field reg3;
#     105                                                covergroup reg3_cov;
#     106                                                  option.per_instance = 1;
#     107                                              
#     108                                                  coverpoint reg3.value[31:0] {
#     109                                                    bins val  = {[0:32'h1FFF_FFFF]};
#     110                                                }  endgroup
#     111                                                
#     112                                                function new (string name = "reg3");
#     113             1                    ***0***         super.new(name,32,UVM_CVR_FIELD_VALS);
#     114                                                  if(has_coverage(UVM_CVR_FIELD_VALS))
#     115             1                    ***0***           reg3_cov = new();
#     116                                                endfunction
#     117                                              
#     118                                                ////////////////////////////// implementation of sample and sample_Values
#     119                                                virtual function void sample(uvm_reg_data_t data,uvm_reg_data_t byte_en,bit is_read,uvm_reg_map map);
#     120             1                    ***0***        reg3_cov.sample();
#     121                                                endfunction
#     122                                                
#     123                                                virtual function void sample_values();
#     124             1                    ***0***        super.sample_values();
#     125             1                    ***0***        reg3_cov.sample();
#     126                                                endfunction
#     127                                               
#     128                                              
#     129                                                function void build;
#     130             1                    ***0***         reg3 = uvm_reg_field :: type_id :: create("reg3");
#     131             1                    ***0***         reg3.configure(this, 32, 0, "RW", 0,32'h5A5A_5555, 1, 1, 1);
#     132                                                endfunction
#     133                                              endclass
#     134                                              
#     135                                              class reg4_field extends uvm_reg;
#     136             1                    ***0***       `uvm_object_utils(reg4_field)
#     136             2                    ***0***     
#     136             3                    ***0***     
#     136             4                    ***0***     
#     136             5                    ***0***     
#     136             6                    ***0***     
#     136             7                    ***0***     
#     136             8                    ***0***     
#     136             9                    ***0***     
#     136            10                    ***0***     
#     137                                              
#     138                                                rand uvm_reg_field reg4;
#     139                                                covergroup reg4_cov;
#     140                                                  option.per_instance = 1;
#     141                                                  coverpoint reg4.value[31:0]{
#     142                                                    bins val  = {[0:32'h1FFF_FFFF]};
#     143                                                  }
#     144                                                endgroup
#     145                                                 
#     146                                              
#     147                                                function new (string name = "reg4");
#     148             1                    ***0***         super.new(name,32,UVM_CVR_FIELD_VALS);
#     149                                                  if(has_coverage(UVM_CVR_FIELD_VALS))
#     150             1                    ***0***           reg4_cov = new();
#     151                                                endfunction
#     152                                              
#     153                                                ////////////////////////////// implementation of sample and sample_Values
#     154                                                virtual function void sample(uvm_reg_data_t data,uvm_reg_data_t byte_en,bit is_read,uvm_reg_map map);
#     155             1                    ***0***        reg4_cov.sample();
#     156                                                endfunction
#     157                                                
#     158                                                virtual function void sample_values();
#     159             1                    ***0***        super.sample_values();
#     160             1                    ***0***        reg4_cov.sample();
#     161                                                endfunction 
#     162                                              
#     163                                                function void build;
#     164             1                    ***0***         reg4 = uvm_reg_field :: type_id :: create("reg4");
#     165             1                    ***0***         reg4.configure(this, 32, 0, "RW", 0, 32'h0000_FFFF, 1, 1, 1);
#     166                                                endfunction
#     167                                              endclass
#     168                                              
#     169                                              class reg_block extends uvm_reg_block;
#     170             1                    ***0***       `uvm_object_utils(reg_block)
#     170             2                    ***0***     
#     170             3                    ***0***     
#     170             4                    ***0***     
#     170             5                    ***0***     
#     170             6                    ***0***     
#     170             7                    ***0***     
#     170             8                    ***0***     
#     170             9                    ***0***     
#     170            10                    ***0***     
#     171                                                 cntrl_field cntrl_inst;
#     172                                                 reg1_field reg1_inst;
#     173                                                 reg2_field reg2_inst;
#     174                                                 reg3_field reg3_inst;
#     175                                                 reg4_field reg4_inst;
#     176                                                
#     177                                                function new(string name = "reg_block");
#     178             1                    ***0***         super.new(name,UVM_NO_COVERAGE);
#     179                                                endfunction
#     180                                                
#     181                                                function void build;
#     182                                                  
#     183                                                 
#     184             1                    ***0***         uvm_reg::include_coverage("*", UVM_CVR_ALL);
#     185             1                    ***0***        cntrl_inst = cntrl_field::type_id::create("cntrl_inst");
#     186             1                    ***0***         cntrl_inst.build();
#     187             1                    ***0***         cntrl_inst.configure(this);
#     188             1                    ***0***        void'(cntrl_inst.set_coverage(UVM_CVR_FIELD_VALS)); //////enabling coverage for specific reg instance
#     189                                                 
#     190             1                    ***0***         reg1_inst = reg1_field::type_id::create("reg1_inst");
#     191             1                    ***0***         reg1_inst.build();
#     192             1                    ***0***         reg1_inst.configure(this);
#     193             1                    ***0***        void'( reg1_inst.set_coverage(UVM_CVR_FIELD_VALS)); //////enabling coverage for specific reg instance
#     194                                                  
#     195             1                    ***0***         reg2_inst = reg2_field::type_id::create("reg2_inst");
#     196             1                    ***0***         reg2_inst.build();
#     197             1                    ***0***         reg2_inst.configure(this);
#     198             1                    ***0***        void'(reg2_inst.set_coverage(UVM_CVR_FIELD_VALS)); //////enabling coverage for specific reg instance
#     199                                                  //reg2_inst.add_hdl_path_slice("reg2",0,32); //reg name in rtl,starting position,no.of bits wide 
#     200                                              
#     201                                                 
#     202             1                    ***0***         reg3_inst = reg3_field::type_id::create("reg3_inst");
#     203             1                    ***0***         reg3_inst.build();
#     204             1                    ***0***         reg3_inst.configure(this);
#     205             1                    ***0***         void'(reg3_inst.set_coverage(UVM_CVR_FIELD_VALS)); //////enabling coverage for specific reg instance
#     206                                                 
#     207             1                    ***0***         reg4_inst = reg4_field::type_id::create("reg4_inst");
#     208             1                    ***0***         reg4_inst.build();
#     209             1                    ***0***         reg4_inst.configure(this);
#     210             1                    ***0***         void'(reg4_inst.set_coverage(UVM_CVR_FIELD_VALS)); //////enabling coverage for specific reg instance
#     211                                               
#     212             1                    ***0***         default_map = create_map("default_map",0,4,UVM_LITTLE_ENDIAN);
#     213             1                    ***0***         default_map.add_reg(cntrl_inst,'h0,"RW");  
#     214             1                    ***0***         default_map.add_reg(reg1_inst,'h04,"RW");
#     215             1                    ***0***         default_map.add_reg(reg2_inst,'h08,"RW");
#     216             1                    ***0***         add_hdl_path("tb.DUT","RTL");
#     217                                              
#     218             1                    ***0***         default_map.add_reg(reg3_inst,'h0c,"RW");
#     219             1                    ***0***         default_map.add_reg(reg4_inst,'h10,"RW");
#     220             1                    ***0***         lock_model();
#     221                                                endfunction 
#     222                                               
#     223                                              endclass
# 
# Branch Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Branches                        70         0        70       0.0
# 
# ================================Branch Details================================
# 
# Branch Coverage for file reg_block.sv --
# 
# ------------------------------------IF Branch------------------------------------
#     2                                    ***0***     Count coming in to IF
#     2               1                    ***0***       `uvm_object_utils(cntrl_field)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     2                                    ***0***     Count coming in to IF
#     2               2                    ***0***       `uvm_object_utils(cntrl_field)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     2                                    ***0***     Count coming in to IF
#     2               3                    ***0***       `uvm_object_utils(cntrl_field)
#     2               4                    ***0***       `uvm_object_utils(cntrl_field)
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     2                                    ***0***     Count coming in to IF
#     2               5                    ***0***       `uvm_object_utils(cntrl_field)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     2                                    ***0***     Count coming in to IF
#     2               6                    ***0***       `uvm_object_utils(cntrl_field)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     14                                   ***0***     Count coming in to IF
#     14              1                    ***0***         if(has_coverage(UVM_CVR_FIELD_VALS))
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     35                                   ***0***     Count coming in to IF
#     35              1                    ***0***       `uvm_object_utils(reg1_field)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     35                                   ***0***     Count coming in to IF
#     35              2                    ***0***       `uvm_object_utils(reg1_field)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     35                                   ***0***     Count coming in to IF
#     35              3                    ***0***       `uvm_object_utils(reg1_field)
#     35              4                    ***0***       `uvm_object_utils(reg1_field)
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     35                                   ***0***     Count coming in to IF
#     35              5                    ***0***       `uvm_object_utils(reg1_field)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     35                                   ***0***     Count coming in to IF
#     35              6                    ***0***       `uvm_object_utils(reg1_field)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     48                                   ***0***     Count coming in to IF
#     48              1                    ***0***         if(has_coverage(UVM_CVR_FIELD_VALS))
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     69                                   ***0***     Count coming in to IF
#     69              1                    ***0***       `uvm_object_utils(reg2_field)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     69                                   ***0***     Count coming in to IF
#     69              2                    ***0***       `uvm_object_utils(reg2_field)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     69                                   ***0***     Count coming in to IF
#     69              3                    ***0***       `uvm_object_utils(reg2_field)
#     69              4                    ***0***       `uvm_object_utils(reg2_field)
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     69                                   ***0***     Count coming in to IF
#     69              5                    ***0***       `uvm_object_utils(reg2_field)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     69                                   ***0***     Count coming in to IF
#     69              6                    ***0***       `uvm_object_utils(reg2_field)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     81                                   ***0***     Count coming in to IF
#     81              1                    ***0***         if(has_coverage(UVM_CVR_FIELD_VALS))
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     102                                  ***0***     Count coming in to IF
#     102             1                    ***0***       `uvm_object_utils(reg3_field)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     102                                  ***0***     Count coming in to IF
#     102             2                    ***0***       `uvm_object_utils(reg3_field)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     102                                  ***0***     Count coming in to IF
#     102             3                    ***0***       `uvm_object_utils(reg3_field)
#     102             4                    ***0***       `uvm_object_utils(reg3_field)
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     102                                  ***0***     Count coming in to IF
#     102             5                    ***0***       `uvm_object_utils(reg3_field)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     102                                  ***0***     Count coming in to IF
#     102             6                    ***0***       `uvm_object_utils(reg3_field)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     114                                  ***0***     Count coming in to IF
#     114             1                    ***0***         if(has_coverage(UVM_CVR_FIELD_VALS))
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     136                                  ***0***     Count coming in to IF
#     136             1                    ***0***       `uvm_object_utils(reg4_field)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     136                                  ***0***     Count coming in to IF
#     136             2                    ***0***       `uvm_object_utils(reg4_field)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     136                                  ***0***     Count coming in to IF
#     136             3                    ***0***       `uvm_object_utils(reg4_field)
#     136             4                    ***0***       `uvm_object_utils(reg4_field)
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     136                                  ***0***     Count coming in to IF
#     136             5                    ***0***       `uvm_object_utils(reg4_field)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     136                                  ***0***     Count coming in to IF
#     136             6                    ***0***       `uvm_object_utils(reg4_field)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     149                                  ***0***     Count coming in to IF
#     149             1                    ***0***         if(has_coverage(UVM_CVR_FIELD_VALS))
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     170                                  ***0***     Count coming in to IF
#     170             1                    ***0***       `uvm_object_utils(reg_block)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     170                                  ***0***     Count coming in to IF
#     170             2                    ***0***       `uvm_object_utils(reg_block)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     170                                  ***0***     Count coming in to IF
#     170             3                    ***0***       `uvm_object_utils(reg_block)
#     170             4                    ***0***       `uvm_object_utils(reg_block)
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     170                                  ***0***     Count coming in to IF
#     170             5                    ***0***       `uvm_object_utils(reg_block)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     170                                  ***0***     Count coming in to IF
#     170             6                    ***0***       `uvm_object_utils(reg_block)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# 
# Condition Coverage:
#     Enabled Coverage            Active   Covered    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FEC Condition Terms              0         0         0     100.0
# Expression Coverage:
#     Enabled Coverage            Active   Covered    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FEC Expression Terms             0         0         0     100.0
# FSM Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FSMs                                                       100.0
#         States                       0         0         0     100.0
#         Transitions                  0         0         0     100.0
# Toggle Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Toggle Bins                      0         0         0     100.0
# 
# ================================Toggle Details================================
# 
# Toggle Coverage for File reg_block.sv --
# 
#        Line                                   Node      1H->0L      0L->1H  "Coverage"
# --------------------------------------------------------------------------------------
# 
# Total Node Count     =          0 
# Toggled Node Count   =          0 
# Untoggled Node Count =          0 
# 
# Toggle Coverage      =      100.0% (0 of 0 bins)
# 
# =================================================================================
# === File: reg_seq.sv
# =================================================================================
# Statement Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Stmts                          211         0       211       0.0
# 
# ================================Statement Details================================
# 
# Statement Coverage for file reg_seq.sv --
# 
#     1                                                class reg_seq extends uvm_sequence;
#     2               1                    ***0***       `uvm_object_utils(reg_seq)
#     2               2                    ***0***     
#     2               3                    ***0***     
#     2               4                    ***0***     
#     2               5                    ***0***     
#     2               6                    ***0***     
#     2               7                    ***0***     
#     2               8                    ***0***     
#     2               9                    ***0***     
#     2              10                    ***0***     
#     3                                                
#     4                                                  reg_block regmodel;
#     5                                                
#     6                                                  function new (string name = "reg_seq");
#     7               1                    ***0***         super.new(name);
#     8                                                  endfunction
#     9                                                
#     10                                                 virtual task body;
#     11                                                   uvm_status_e status;
#     12                                                   bit [31:0] rdata, rdata_m, dout,reset_reg;
#     13                                                   ///////////////// CNTRL /////////////////////
#     14              1                    ***0***         `uvm_info("SEQ", "====== CNTRL ======", UVM_NONE);
#     15                                               
#     16              1                    ***0***         rdata   = regmodel.cntrl_inst.get();
#     17              1                    ***0***         rdata_m = regmodel.cntrl_inst.get_mirrored_value();
#     18              1                    ***0***         `uvm_info("SEQ", $sformatf("Initial CNTRL -> Desired: %0h, Mirrored: %0h", rdata, rdata_m), UVM_NONE);
#     19                                               
#     20              1                    ***0***         regmodel.cntrl_inst.set(4'h1);
#     21              1                    ***0***         rdata   = regmodel.cntrl_inst.get();
#     22              1                    ***0***         rdata_m = regmodel.cntrl_inst.get_mirrored_value();
#     23              1                    ***0***         `uvm_info("SEQ", $sformatf("After set CNTRL -> Desired: %0h, Mirrored: %0h", rdata, rdata_m), UVM_NONE);
#     24                                               
#     25              1                    ***0***         regmodel.cntrl_inst.update(status);
#     26              1                    ***0***         rdata   = regmodel.cntrl_inst.get();
#     27              1                    ***0***         rdata_m = regmodel.cntrl_inst.get_mirrored_value();
#     28              1                    ***0***         `uvm_info("SEQ", $sformatf("After update CNTRL -> Desired: %0h, Mirrored: %0h, Read: %0h", rdata, rdata_m, dout), UVM_NONE);
#     29                                               
#     30                                               
#     31                                               
#     32              1                    ***0***         regmodel.cntrl_inst.write(status,4'h1);
#     33              1                    ***0***         rdata   = regmodel.cntrl_inst.get();
#     34              1                    ***0***         rdata_m = regmodel.cntrl_inst.get_mirrored_value();
#     35              1                    ***0***         `uvm_info("SEQ", $sformatf("After write CNTRL -> Desired: %0h, Mirrored: %0h, Read: %0h", rdata, rdata_m,dout), UVM_NONE);
#     36              1                    ***0***         regmodel.cntrl_inst.read(status,dout);
#     37              1                    ***0***         rdata   = regmodel.cntrl_inst.get();
#     38              1                    ***0***         rdata_m = regmodel.cntrl_inst.get_mirrored_value();
#     39              1                    ***0***         `uvm_info("SEQ", $sformatf("After read CNTRL -> Desired: %0h, Mirrored: %0h, Read: %0h", rdata, rdata_m,dout), UVM_NONE);
#     40                                               
#     41                                               
#     42                                                   ///////////////// REG1/////////////////////
#     43              1                    ***0***         `uvm_info("SEQ", "====== REG1 ======", UVM_NONE);
#     44                                               
#     45              1                    ***0***         rdata   = regmodel.reg1_inst.get();
#     46              1                    ***0***         rdata_m = regmodel.reg1_inst.get_mirrored_value();
#     47              1                    ***0***         `uvm_info("SEQ", $sformatf("Initial REG1 -> Desired: %0h, Mirrored: %0h", rdata, rdata_m), UVM_NONE);
#     48                                               
#     49              1                    ***0***         regmodel.reg1_inst.set(32'h01);
#     50              1                    ***0***         rdata   = regmodel.reg1_inst.get();
#     51              1                    ***0***         rdata_m = regmodel.reg1_inst.get_mirrored_value();
#     52              1                    ***0***         `uvm_info("SEQ", $sformatf("After set REG1 -> Desired: %0h, Mirrored: %0h", rdata, rdata_m), UVM_NONE);
#     53                                               
#     54              1                    ***0***         regmodel.reg1_inst.update(status);
#     55              1                    ***0***         rdata   = regmodel.reg1_inst.get();
#     56              1                    ***0***         rdata_m = regmodel.reg1_inst.get_mirrored_value();
#     57              1                    ***0***         `uvm_info("SEQ", $sformatf("After update  REG1 -> Desired: %0h, Mirrored: %0h, Read: %0h", rdata, rdata_m, dout), UVM_NONE);
#     58                                               
#     59                                               
#     60                                               
#     61              1                    ***0***         regmodel.reg1_inst.write(status,32'h01);
#     62              1                    ***0***         rdata   = regmodel.reg1_inst.get();
#     63              1                    ***0***         rdata_m = regmodel.reg1_inst.get_mirrored_value();
#     64              1                    ***0***         `uvm_info("SEQ", $sformatf("After write REG1 -> Desired: %0h, Mirrored: %0h, Read: %0h", rdata, rdata_m,dout), UVM_NONE);
#     65              1                    ***0***         regmodel.reg1_inst.read(status,dout);
#     66              1                    ***0***         rdata   = regmodel.reg1_inst.get();
#     67              1                    ***0***         rdata_m = regmodel.reg1_inst.get_mirrored_value();
#     68              1                    ***0***         `uvm_info("SEQ", $sformatf("After read REG1 -> Desired: %0h, Mirrored: %0h, Read: %0h", rdata, rdata_m,dout), UVM_NONE);
#     69                                               
#     70                                               
#     71                                                //////////////////////////REG2//////////////////////////////////////////////////////
#     72              1                    ***0***        `uvm_info("SEQ", "====== REG2 ======", UVM_NONE);
#     73                                               
#     74              1                    ***0***         rdata   = regmodel.reg2_inst.get();
#     75              1                    ***0***         rdata_m = regmodel.reg2_inst.get_mirrored_value();
#     76              1                    ***0***         `uvm_info("SEQ", $sformatf("Initial REG2 -> Desired: %0h, Mirrored: %0h", rdata, rdata_m), UVM_NONE);
#     77                                               
#     78              1                    ***0***         regmodel.reg2_inst.set(32'h11);
#     79              1                    ***0***         rdata   = regmodel.reg2_inst.get();
#     80              1                    ***0***         rdata_m = regmodel.reg2_inst.get_mirrored_value();
#     81              1                    ***0***         `uvm_info("SEQ", $sformatf("After set REG2 -> Desired: %0h, Mirrored: %0h", rdata, rdata_m), UVM_NONE);
#     82                                               
#     83              1                    ***0***         regmodel.reg2_inst.update(status);
#     84              1                    ***0***         rdata   = regmodel.reg2_inst.get();
#     85              1                    ***0***         rdata_m = regmodel.reg2_inst.get_mirrored_value();
#     86              1                    ***0***         `uvm_info("SEQ", $sformatf("After update  REG2 -> Desired: %0h, Mirrored: %0h, Read: %0h", rdata, rdata_m, dout), UVM_NONE);
#     87                                               
#     88                                               
#     89                                               
#     90              1                    ***0***         regmodel.reg2_inst.write(status,32'h11);
#     91              1                    ***0***         rdata   = regmodel.reg2_inst.get();
#     92              1                    ***0***         rdata_m = regmodel.reg2_inst.get_mirrored_value();
#     93              1                    ***0***         `uvm_info("SEQ", $sformatf("After write REG2 -> Desired: %0h, Mirrored: %0h, Read: %0h", rdata, rdata_m,dout), UVM_NONE);
#     94              1                    ***0***         regmodel.reg2_inst.read(status,dout);
#     95              1                    ***0***         rdata   = regmodel.reg2_inst.get();
#     96              1                    ***0***         rdata_m = regmodel.reg2_inst.get_mirrored_value();
#     97              1                    ***0***         `uvm_info("SEQ", $sformatf("After read REG2 -> Desired: %0h, Mirrored: %0h, Read: %0h", rdata, rdata_m,dout), UVM_NONE);
#     98                                               
#     99                                                   ///////////////// REG3 /////////////////////
#     100             1                    ***0***         `uvm_info("SEQ", "====== REG3 ======", UVM_NONE);
#     101                                              
#     102             1                    ***0***         rdata   = regmodel.reg3_inst.get();
#     103             1                    ***0***         rdata_m = regmodel.reg3_inst.get_mirrored_value();
#     104             1                    ***0***         `uvm_info("SEQ", $sformatf("Initial REG3 -> Desired: %0h, Mirrored: %0h", rdata, rdata_m), UVM_NONE);
#     105                                              
#     106             1                    ***0***         regmodel.reg3_inst.set(32'h22);
#     107             1                    ***0***         rdata   = regmodel.reg3_inst.get();
#     108             1                    ***0***         rdata_m = regmodel.reg3_inst.get_mirrored_value();
#     109             1                    ***0***         `uvm_info("SEQ", $sformatf("After set REG3 -> Desired: %0h, Mirrored: %0h", rdata, rdata_m), UVM_NONE);
#     110                                              
#     111             1                    ***0***         regmodel.reg3_inst.update(status);
#     112             1                    ***0***         rdata   = regmodel.reg3_inst.get();
#     113             1                    ***0***         rdata_m = regmodel.reg3_inst.get_mirrored_value();
#     114             1                    ***0***         `uvm_info("SEQ", $sformatf("After update REG3 -> Desired: %0h, Mirrored: %0h, Read: %0h", rdata, rdata_m, dout), UVM_NONE);
#     115                                                  
#     116             1                    ***0***         regmodel.reg3_inst.write(status,32'h12);
#     117             1                    ***0***         rdata   = regmodel.reg3_inst.get();
#     118             1                    ***0***         rdata_m = regmodel.reg3_inst.get_mirrored_value();
#     119             1                    ***0***         `uvm_info("SEQ", $sformatf("After write REG3 -> Desired: %0h, Mirrored: %0h, Read: %0h", rdata, rdata_m,dout), UVM_NONE);
#     120             1                    ***0***         regmodel.reg3_inst.read(status,dout);
#     121             1                    ***0***         rdata   = regmodel.reg3_inst.get();
#     122             1                    ***0***         rdata_m = regmodel.reg3_inst.get_mirrored_value();
#     123             1                    ***0***         `uvm_info("SEQ", $sformatf("After read REG3 -> Desired: %0h, Mirrored: %0h, Read: %0h", rdata, rdata_m,dout), UVM_NONE);
#     124                                              
#     125                                              
#     126                                              
#     127                                                  ///////////////// REG4 /////////////////////
#     128             1                    ***0***         `uvm_info("SEQ", "====== REG4 ======", UVM_NONE);
#     129                                              
#     130             1                    ***0***         rdata   = regmodel.reg4_inst.get();
#     131             1                    ***0***         rdata_m = regmodel.reg4_inst.get_mirrored_value();
#     132             1                    ***0***         `uvm_info("SEQ", $sformatf("Initial REG4 -> Desired: %0h, Mirrored: %0h", rdata, rdata_m), UVM_NONE);
#     133                                              
#     134             1                    ***0***         regmodel.reg4_inst.set(32'h33);
#     135             1                    ***0***         rdata   = regmodel.reg4_inst.get();
#     136             1                    ***0***         rdata_m = regmodel.reg4_inst.get_mirrored_value();
#     137             1                    ***0***         `uvm_info("SEQ", $sformatf("After set REG4 -> Desired: %0h, Mirrored: %0h", rdata, rdata_m), UVM_NONE);
#     138                                              
#     139             1                    ***0***         regmodel.reg4_inst.update(status);
#     140             1                    ***0***         rdata   = regmodel.reg4_inst.get();
#     141             1                    ***0***         rdata_m = regmodel.reg4_inst.get_mirrored_value();
#     142             1                    ***0***         `uvm_info("SEQ", $sformatf("After update REG4 -> Desired: %0h, Mirrored: %0h, Read: %0h", rdata, rdata_m, dout), UVM_NONE);
#     143                                                   
#     144             1                    ***0***         regmodel.reg4_inst.write(status,32'h23);
#     145             1                    ***0***         rdata   = regmodel.reg4_inst.get();
#     146             1                    ***0***         rdata_m = regmodel.reg4_inst.get_mirrored_value();
#     147             1                    ***0***         `uvm_info("SEQ", $sformatf("After write REG4 -> Desired: %0h, Mirrored: %0h, Read: %0h", rdata, rdata_m,dout), UVM_NONE);
#     148             1                    ***0***         regmodel.reg4_inst.read(status,dout);
#     149             1                    ***0***         rdata   = regmodel.reg4_inst.get();
#     150             1                    ***0***         rdata_m = regmodel.reg4_inst.get_mirrored_value();
#     151             1                    ***0***         `uvm_info("SEQ", $sformatf("After read REG4 -> Desired: %0h, Mirrored: %0h, Read: %0h", rdata, rdata_m,dout), UVM_NONE);
#     152                                               
#     153                                                endtask
#     154                                              endclass
#     155                                              
#     156                                              
#     157                                              class reset_seq extends uvm_sequence;
#     158             1                    ***0***       `uvm_object_utils(reset_seq)
#     158             2                    ***0***     
#     158             3                    ***0***     
#     158             4                    ***0***     
#     158             5                    ***0***     
#     158             6                    ***0***     
#     158             7                    ***0***     
#     158             8                    ***0***     
#     158             9                    ***0***     
#     158            10                    ***0***     
#     159                                                reg_block regmodel;
#     160                                                virtual top_if vif;
#     161                                              
#     162                                               
#     163                                               function new (string name = "reset_seq");
#     164             1                    ***0***         super.new(name);
#     165                                                endfunction
#     166                                              
#     167                                                 task body;
#     168                                                  uvm_status_e status;
#     169                                                  bit [31:0] rdata, rdata_m, dout, reset_reg;
#     170                                                 bit reset_status;
#     171                                                 if (!uvm_config_db#(virtual top_if)::get(null,"","vif",vif))
#     172             1                    ***0***           `uvm_fatal("VIF", "vif not set")
#     173                                               
#     174             1                    ***0***      `uvm_info("SEQ", "====== REG1 RESET ======", UVM_NONE);
#     175             1                    ***0***         reset_status = regmodel.reg1_inst.has_reset();
#     176             1                    ***0***         `uvm_info("SEQ", $sformatf("Reset Value is present: %0b ", reset_status), UVM_NONE);
#     177                                                 
#     178             1                    ***0***         reset_reg=regmodel.reg1_inst.get_reset();
#     179             1                    ***0***         `uvm_info("SEQ", $sformatf(" REG1:reset value present in RAL model: 0x%08h",reset_reg), UVM_LOW);
#     180             1                    ***0***          rdata   = regmodel.reg1_inst.get();         
#     181             1                    ***0***          rdata_m = regmodel.reg1_inst.get_mirrored_value();
#     182             1                    ***0***       `uvm_info("SEQ", $sformatf("before reset -> Desired: 0x%08h, Mirrored:0x%08h",rdata,rdata_m), UVM_LOW);
#     183             1                    ***0***       $display("------ Applying reset value for REG1 ------");
#     184             1                    ***0***       regmodel.reg1_inst.reset();
#     185             1                    ***0***       regmodel.reg1_inst.mirror(status, UVM_CHECK);      // Read DUT and update mirrored
#     186             1                    ***0***       rdata   = regmodel.reg1_inst.get();                    // Desired (same as before)
#     187             1                    ***0***       rdata_m = regmodel.reg1_inst.get_mirrored_value();     // Now updated from DUT
#     188             1                    ***0***       dout = rdata_m;
#     189             1                    ***0***       `uvm_info("SEQ", $sformatf("After reset -> Desired: %0h, Mirrored: %0h", rdata, rdata_m), UVM_NONE);
#     190                                               if(dout !== reset_reg)begin
#     191             1                    ***0***           `uvm_error("SEQ", $sformatf("Reset mismatch: DUT read = 0x%08h, Expected (RAL) = 0x%08h", dout, reset_reg));
#     192                                                  end else begin
#     193             1                    ***0***           `uvm_info("SEQ", "Reset verification for REG1 passed!", UVM_LOW);
#     194                                                  end
#     195                                              
#     196             1                    ***0***     `uvm_info("SEQ", "====== REG2 RESET ======", UVM_NONE);
#     197             1                    ***0***     reset_status = regmodel.reg2_inst.has_reset();
#     198             1                    ***0***     `uvm_info("SEQ", $sformatf("Reset Value is present: %0b ", reset_status), UVM_NONE);
#     199                                              
#     200             1                    ***0***     reset_reg=regmodel.reg2_inst.get_reset();
#     201             1                    ***0***     `uvm_info("SEQ", $sformatf(" REG2:reset value present in RAL model: 0x%08h",reset_reg), UVM_LOW);
#     202             1                    ***0***     rdata   = regmodel.reg2_inst.get();
#     203             1                    ***0***     rdata_m = regmodel.reg2_inst.get_mirrored_value();
#     204             1                    ***0***     `uvm_info("SEQ", $sformatf("before reset -> Desired: 0x%08h, Mirrored:0x%08h",rdata,rdata_m), UVM_LOW);
#     205             1                    ***0***     $display("------ Applying reset value for REG2 ------");
#     206             1                    ***0***     regmodel.reg2_inst.reset();
#     207             1                    ***0***     regmodel.reg2_inst.mirror(status, UVM_CHECK);      // Read DUT and update mirrored
#     208             1                    ***0***     rdata   = regmodel.reg2_inst.get();                    // Desired (same as before)
#     209             1                    ***0***     rdata_m = regmodel.reg2_inst.get_mirrored_value();     // Now updated from DUT
#     210             1                    ***0***     dout = rdata_m;
#     211             1                    ***0***     `uvm_info("SEQ", $sformatf("After reset -> Desired: %0h, Mirrored: %0h", rdata, rdata_m), UVM_NONE);
#     212                                              if(dout !== reset_reg)begin
#     213             1                    ***0***       `uvm_error("SEQ", $sformatf("Reset mismatch: DUT read = 0x%08h, Expected (RAL) = 0x%08h", dout, reset_reg));
#     214                                              end else begin
#     215             1                    ***0***       `uvm_info("SEQ", "Reset verification for REG2 passed!", UVM_LOW);
#     216                                              end
#     217                                              
#     218             1                    ***0***     `uvm_info("SEQ", "====== REG3 RESET ======", UVM_NONE);
#     219             1                    ***0***     reset_status = regmodel.reg3_inst.has_reset();
#     220             1                    ***0***     `uvm_info("SEQ", $sformatf("Reset Value is present: %0b ", reset_status), UVM_NONE);
#     221                                              
#     222             1                    ***0***     reset_reg=regmodel.reg3_inst.get_reset();
#     223             1                    ***0***     `uvm_info("SEQ", $sformatf(" REG3:reset value present in RAL model: 0x%08h",reset_reg), UVM_LOW);
#     224             1                    ***0***     rdata   = regmodel.reg3_inst.get();
#     225             1                    ***0***     rdata_m = regmodel.reg3_inst.get_mirrored_value();
#     226             1                    ***0***     `uvm_info("SEQ", $sformatf("before reset -> Desired: 0x%08h, Mirrored:0x%08h",rdata,rdata_m), UVM_LOW);
#     227             1                    ***0***     $display("------ Applying reset value for REG3 ------");
#     228             1                    ***0***     regmodel.reg3_inst.reset();
#     229             1                    ***0***     regmodel.reg3_inst.mirror(status, UVM_CHECK);      // Read DUT and update mirrored
#     230             1                    ***0***     rdata   = regmodel.reg3_inst.get();                    // Desired (same as before)
#     231             1                    ***0***     rdata_m = regmodel.reg3_inst.get_mirrored_value();     // Now updated from DUT
#     232             1                    ***0***     dout = rdata_m;
#     233             1                    ***0***     `uvm_info("SEQ", $sformatf("After reset -> Desired: %0h, Mirrored: %0h", rdata, rdata_m), UVM_NONE);
#     234                                              if(dout !== reset_reg)begin
#     235             1                    ***0***       `uvm_error("SEQ", $sformatf("Reset mismatch: DUT read = 0x%08h, Expected (RAL) = 0x%08h", dout, reset_reg));
#     236                                              end else begin
#     237             1                    ***0***       `uvm_info("SEQ", "Reset verification for REG3 passed!", UVM_LOW);
#     238                                              end
#     239                                              
#     240                                              
#     241             1                    ***0***     `uvm_info("SEQ", "====== REG4 RESET ======", UVM_NONE);
#     242             1                    ***0***     reset_status = regmodel.reg4_inst.has_reset();
#     243             1                    ***0***     `uvm_info("SEQ", $sformatf("Reset Value is present: %0b ", reset_status), UVM_NONE);
#     244                                              
#     245             1                    ***0***     reset_reg=regmodel.reg4_inst.get_reset();
#     246             1                    ***0***     `uvm_info("SEQ", $sformatf(" REG4:reset value present in RAL model: 0x%08h",reset_reg), UVM_LOW);
#     247             1                    ***0***     rdata   = regmodel.reg4_inst.get();
#     248             1                    ***0***     rdata_m = regmodel.reg4_inst.get_mirrored_value();
#     249             1                    ***0***     `uvm_info("SEQ", $sformatf("before reset -> Desired: 0x%08h, Mirrored:0x%08h",rdata,rdata_m), UVM_LOW);
#     250             1                    ***0***     $display("------ Applying reset value for REG4 ------");
#     251             1                    ***0***     regmodel.reg4_inst.reset();
#     252             1                    ***0***     regmodel.reg4_inst.mirror(status, UVM_CHECK);      // Read DUT and update mirrored
#     253             1                    ***0***     rdata   = regmodel.reg4_inst.get();                    // Desired (same as before)
#     254             1                    ***0***     rdata_m = regmodel.reg4_inst.get_mirrored_value();     // Now updated from DUT
#     255             1                    ***0***     dout = rdata_m;
#     256             1                    ***0***     `uvm_info("SEQ", $sformatf("After reset -> Desired: %0h, Mirrored: %0h", rdata, rdata_m), UVM_NONE);
#     257                                              if(dout !== reset_reg)begin
#     258             1                    ***0***       `uvm_error("SEQ", $sformatf("Reset mismatch: DUT read = 0x%08h, Expected (RAL) = 0x%08h", dout, reset_reg));
#     259                                              end else begin
#     260             1                    ***0***       `uvm_info("SEQ", "Reset verification for REG4 passed!", UVM_LOW);
#     261                                              end
#     262                                              
#     263                                              /*
#     264                                               `uvm_info("SEQ", "====== REG2 RESET ======", UVM_NONE);
#     265                                                  reset_status = regmodel.reg2_inst.has_reset();
#     266                                                  `uvm_info("SEQ", $sformatf("Reset Value is present: %0h ", reset_status), UVM_NONE);
#     267                                                 
#     268                                                  regmodel.reg2_inst.reset();
#     269                                                   rdata   = regmodel.reg2_inst.get();                  // Desired
#     270                                                   rdata_m = regmodel.reg2_inst.get_mirrored_value();
#     271                                                  `uvm_info("SEQ", $sformatf("before mirror REG2 -> Desired: %0h, Mirrored: %0h", rdata, rdata_m), UVM_NONE);
#     272                                              
#     273                                                 $display("------ Applying mirror (frontdoor) to read RTL reset value for REG2 ------");
#     274                                                regmodel.reg2_inst.mirror(status, UVM_CHECK);      // Read DUT and update mirrored
#     275                                              
#     276                                                rdata   = regmodel.reg2_inst.get();                    // Desired (same as before)
#     277                                                rdata_m = regmodel.reg2_inst.get_mirrored_value();     // Now updated from DUT
#     278                                                `uvm_info("SEQ", $sformatf("After mirror -> Desired: %0h, Mirrored: %0h", rdata, rdata_m), UVM_NONE);
#     279                                                
#     280                                              
#     281                                                `uvm_info("SEQ", "====== REG3 RESET ======", UVM_NONE);
#     282                                                  reset_status = regmodel.reg3_inst.has_reset();
#     283                                                  `uvm_info("SEQ", $sformatf("Reset Value is present: %0h ", reset_status), UVM_NONE);
#     284                                                 
#     285                                                  regmodel.reg3_inst.reset();
#     286                                                   rdata   = regmodel.reg3_inst.get();                  // Desired
#     287                                                   rdata_m = regmodel.reg3_inst.get_mirrored_value();
#     288                                                  `uvm_info("SEQ", $sformatf("before mirror REG3 -> Desired: %0h, Mirrored: %0h", rdata, rdata_m), UVM_NONE);
#     289                                              
#     290                                                 $display("------ Applying mirror (frontdoor) to read RTL reset value for REG3 ------");
#     291                                                regmodel.reg3_inst.mirror(status, UVM_CHECK);      // Read DUT and update mirrored
#     292                                              
#     293                                                rdata   = regmodel.reg3_inst.get();                    // Desired (same as before)
#     294                                                rdata_m = regmodel.reg3_inst.get_mirrored_value();     // Now updated from DUT
#     295                                                `uvm_info("SEQ", $sformatf("After mirror -> Desired: %0h, Mirrored: %0h", rdata, rdata_m), UVM_NONE);
#     296                                                
#     297                                                
#     298                                                `uvm_info("SEQ", "====== REG4 RESET ======", UVM_NONE);
#     299                                                  reset_status = regmodel.reg4_inst.has_reset();
#     300                                                  `uvm_info("SEQ", $sformatf("Reset Value is present: %0h ", reset_status), UVM_NONE);
#     301                                                 
#     302                                                  regmodel.reg4_inst.reset();
#     303                                                   rdata   = regmodel.reg4_inst.get();                  // Desired
#     304                                                   rdata_m = regmodel.reg4_inst.get_mirrored_value();
#     305                                                  `uvm_info("SEQ", $sformatf("before mirror REG4 -> Desired: %0h, Mirrored: %0h", rdata, rdata_m), UVM_NONE);
#     306                                              
#     307                                                 $display("------ Applying mirror (frontdoor) to read RTL reset value for REG3 ------");
#     308                                                regmodel.reg4_inst.mirror(status, UVM_CHECK);      // Read DUT and update mirrored
#     309                                              
#     310                                                rdata   = regmodel.reg4_inst.get();                    // Desired (same as before)
#     311                                                rdata_m = regmodel.reg4_inst.get_mirrored_value();     // Now updated from DUT
#     312                                                `uvm_info("SEQ", $sformatf("After mirror -> Desired: %0h, Mirrored: %0h", rdata, rdata_m), UVM_NONE);
#     313                                              */
#     314                                                endtask
#     315                                              endclass
#     316                                              
#     317                                              class backdoor_seq extends uvm_sequence;
#     318             1                    ***0***       `uvm_object_utils(backdoor_seq)
#     318             2                    ***0***     
#     318             3                    ***0***     
#     318             4                    ***0***     
#     318             5                    ***0***     
#     318             6                    ***0***     
#     318             7                    ***0***     
#     318             8                    ***0***     
#     318             9                    ***0***     
#     318            10                    ***0***     
#     319                                                reg_block regmodel;
#     320                                                function new (string name = "backdoor_seq"); 
#     321             1                    ***0***         super.new(name); 
#     322                                                endfunction
#     323                                                task body; 
#     324                                                  uvm_status_e status;
#     325                                                   bit [31:0] rdata, rdata_m, dout;
#     326                                               
#     327             1                    ***0***         regmodel.reg2_inst.poke(status, 4'hf);
#     328             1                    ***0***         rdata = regmodel.reg2_inst.get();
#     329             1                    ***0***         rdata_m = regmodel.reg2_inst.get_mirrored_value();
#     330             1                    ***0***         `uvm_info("SEQ", $sformatf("POKE:Write -> Desired: %0h Mirrored: %0h",rdata, rdata_m), UVM_NONE);
#     331             1                    ***0***         $display("-----------------------------------------------");
#     332             1                    ***0***         regmodel.reg2_inst.peek(status, rdata);
#     333                                              //    `uvm_info(get_type_name(),$sformatf("PEEK:READ : %0h",dout),UVM_LOW);
#     334             1                    ***0***         rdata = regmodel.reg2_inst.get();
#     335             1                    ***0***         rdata_m = regmodel.reg2_inst.get_mirrored_value();
#     336             1                    ***0***         `uvm_info("SEQ", $sformatf("AFTER PEEK--->Desired: %0h Mirrored: %0h", rdata, rdata_m), UVM_NONE);
#     337                                                endtask
#     338                                              endclass
# 
# Branch Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Branches                       162         0       162       0.0
# 
# ================================Branch Details================================
# 
# Branch Coverage for file reg_seq.sv --
# 
# ------------------------------------IF Branch------------------------------------
#     2                                    ***0***     Count coming in to IF
#     2               1                    ***0***       `uvm_object_utils(reg_seq)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     2                                    ***0***     Count coming in to IF
#     2               2                    ***0***       `uvm_object_utils(reg_seq)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     2                                    ***0***     Count coming in to IF
#     2               3                    ***0***       `uvm_object_utils(reg_seq)
#     2               4                    ***0***       `uvm_object_utils(reg_seq)
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     2                                    ***0***     Count coming in to IF
#     2               5                    ***0***       `uvm_object_utils(reg_seq)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     2                                    ***0***     Count coming in to IF
#     2               6                    ***0***       `uvm_object_utils(reg_seq)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     14                                   ***0***     Count coming in to IF
#     14              1                    ***0***         `uvm_info("SEQ", "====== CNTRL ======", UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     18                                   ***0***     Count coming in to IF
#     18              1                    ***0***         `uvm_info("SEQ", $sformatf("Initial CNTRL -> Desired: %0h, Mirrored: %0h", rdata, rdata_m), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     23                                   ***0***     Count coming in to IF
#     23              1                    ***0***         `uvm_info("SEQ", $sformatf("After set CNTRL -> Desired: %0h, Mirrored: %0h", rdata, rdata_m), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     28                                   ***0***     Count coming in to IF
#     28              1                    ***0***         `uvm_info("SEQ", $sformatf("After update CNTRL -> Desired: %0h, Mirrored: %0h, Read: %0h", rdata, rdata_m, dout), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     35                                   ***0***     Count coming in to IF
#     35              1                    ***0***         `uvm_info("SEQ", $sformatf("After write CNTRL -> Desired: %0h, Mirrored: %0h, Read: %0h", rdata, rdata_m,dout), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     39                                   ***0***     Count coming in to IF
#     39              1                    ***0***         `uvm_info("SEQ", $sformatf("After read CNTRL -> Desired: %0h, Mirrored: %0h, Read: %0h", rdata, rdata_m,dout), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     43                                   ***0***     Count coming in to IF
#     43              1                    ***0***         `uvm_info("SEQ", "====== REG1 ======", UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     47                                   ***0***     Count coming in to IF
#     47              1                    ***0***         `uvm_info("SEQ", $sformatf("Initial REG1 -> Desired: %0h, Mirrored: %0h", rdata, rdata_m), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     52                                   ***0***     Count coming in to IF
#     52              1                    ***0***         `uvm_info("SEQ", $sformatf("After set REG1 -> Desired: %0h, Mirrored: %0h", rdata, rdata_m), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     57                                   ***0***     Count coming in to IF
#     57              1                    ***0***         `uvm_info("SEQ", $sformatf("After update  REG1 -> Desired: %0h, Mirrored: %0h, Read: %0h", rdata, rdata_m, dout), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     64                                   ***0***     Count coming in to IF
#     64              1                    ***0***         `uvm_info("SEQ", $sformatf("After write REG1 -> Desired: %0h, Mirrored: %0h, Read: %0h", rdata, rdata_m,dout), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     68                                   ***0***     Count coming in to IF
#     68              1                    ***0***         `uvm_info("SEQ", $sformatf("After read REG1 -> Desired: %0h, Mirrored: %0h, Read: %0h", rdata, rdata_m,dout), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     72                                   ***0***     Count coming in to IF
#     72              1                    ***0***        `uvm_info("SEQ", "====== REG2 ======", UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     76                                   ***0***     Count coming in to IF
#     76              1                    ***0***         `uvm_info("SEQ", $sformatf("Initial REG2 -> Desired: %0h, Mirrored: %0h", rdata, rdata_m), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     81                                   ***0***     Count coming in to IF
#     81              1                    ***0***         `uvm_info("SEQ", $sformatf("After set REG2 -> Desired: %0h, Mirrored: %0h", rdata, rdata_m), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     86                                   ***0***     Count coming in to IF
#     86              1                    ***0***         `uvm_info("SEQ", $sformatf("After update  REG2 -> Desired: %0h, Mirrored: %0h, Read: %0h", rdata, rdata_m, dout), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     93                                   ***0***     Count coming in to IF
#     93              1                    ***0***         `uvm_info("SEQ", $sformatf("After write REG2 -> Desired: %0h, Mirrored: %0h, Read: %0h", rdata, rdata_m,dout), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     97                                   ***0***     Count coming in to IF
#     97              1                    ***0***         `uvm_info("SEQ", $sformatf("After read REG2 -> Desired: %0h, Mirrored: %0h, Read: %0h", rdata, rdata_m,dout), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     100                                  ***0***     Count coming in to IF
#     100             1                    ***0***         `uvm_info("SEQ", "====== REG3 ======", UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     104                                  ***0***     Count coming in to IF
#     104             1                    ***0***         `uvm_info("SEQ", $sformatf("Initial REG3 -> Desired: %0h, Mirrored: %0h", rdata, rdata_m), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     109                                  ***0***     Count coming in to IF
#     109             1                    ***0***         `uvm_info("SEQ", $sformatf("After set REG3 -> Desired: %0h, Mirrored: %0h", rdata, rdata_m), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     114                                  ***0***     Count coming in to IF
#     114             1                    ***0***         `uvm_info("SEQ", $sformatf("After update REG3 -> Desired: %0h, Mirrored: %0h, Read: %0h", rdata, rdata_m, dout), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     119                                  ***0***     Count coming in to IF
#     119             1                    ***0***         `uvm_info("SEQ", $sformatf("After write REG3 -> Desired: %0h, Mirrored: %0h, Read: %0h", rdata, rdata_m,dout), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     123                                  ***0***     Count coming in to IF
#     123             1                    ***0***         `uvm_info("SEQ", $sformatf("After read REG3 -> Desired: %0h, Mirrored: %0h, Read: %0h", rdata, rdata_m,dout), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     128                                  ***0***     Count coming in to IF
#     128             1                    ***0***         `uvm_info("SEQ", "====== REG4 ======", UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     132                                  ***0***     Count coming in to IF
#     132             1                    ***0***         `uvm_info("SEQ", $sformatf("Initial REG4 -> Desired: %0h, Mirrored: %0h", rdata, rdata_m), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     137                                  ***0***     Count coming in to IF
#     137             1                    ***0***         `uvm_info("SEQ", $sformatf("After set REG4 -> Desired: %0h, Mirrored: %0h", rdata, rdata_m), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     142                                  ***0***     Count coming in to IF
#     142             1                    ***0***         `uvm_info("SEQ", $sformatf("After update REG4 -> Desired: %0h, Mirrored: %0h, Read: %0h", rdata, rdata_m, dout), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     147                                  ***0***     Count coming in to IF
#     147             1                    ***0***         `uvm_info("SEQ", $sformatf("After write REG4 -> Desired: %0h, Mirrored: %0h, Read: %0h", rdata, rdata_m,dout), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     151                                  ***0***     Count coming in to IF
#     151             1                    ***0***         `uvm_info("SEQ", $sformatf("After read REG4 -> Desired: %0h, Mirrored: %0h, Read: %0h", rdata, rdata_m,dout), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     158                                  ***0***     Count coming in to IF
#     158             1                    ***0***       `uvm_object_utils(reset_seq)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     158                                  ***0***     Count coming in to IF
#     158             2                    ***0***       `uvm_object_utils(reset_seq)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     158                                  ***0***     Count coming in to IF
#     158             3                    ***0***       `uvm_object_utils(reset_seq)
#     158             4                    ***0***       `uvm_object_utils(reset_seq)
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     158                                  ***0***     Count coming in to IF
#     158             5                    ***0***       `uvm_object_utils(reset_seq)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     158                                  ***0***     Count coming in to IF
#     158             6                    ***0***       `uvm_object_utils(reset_seq)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     171                                  ***0***     Count coming in to IF
#     171             1                    ***0***        if (!uvm_config_db#(virtual top_if)::get(null,"","vif",vif))
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     172                                  ***0***     Count coming in to IF
#     172             1                    ***0***           `uvm_fatal("VIF", "vif not set")
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     174                                  ***0***     Count coming in to IF
#     174             1                    ***0***      `uvm_info("SEQ", "====== REG1 RESET ======", UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     176                                  ***0***     Count coming in to IF
#     176             1                    ***0***         `uvm_info("SEQ", $sformatf("Reset Value is present: %0b ", reset_status), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     179                                  ***0***     Count coming in to IF
#     179             1                    ***0***         `uvm_info("SEQ", $sformatf(" REG1:reset value present in RAL model: 0x%08h",reset_reg), UVM_LOW);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     182                                  ***0***     Count coming in to IF
#     182             1                    ***0***       `uvm_info("SEQ", $sformatf("before reset -> Desired: 0x%08h, Mirrored:0x%08h",rdata,rdata_m), UVM_LOW);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     189                                  ***0***     Count coming in to IF
#     189             1                    ***0***       `uvm_info("SEQ", $sformatf("After reset -> Desired: %0h, Mirrored: %0h", rdata, rdata_m), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     190                                  ***0***     Count coming in to IF
#     190             1                    ***0***      if(dout !== reset_reg)begin
#     192             1                    ***0***         end else begin
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     191                                  ***0***     Count coming in to IF
#     191             1                    ***0***           `uvm_error("SEQ", $sformatf("Reset mismatch: DUT read = 0x%08h, Expected (RAL) = 0x%08h", dout, reset_reg));
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     193                                  ***0***     Count coming in to IF
#     193             1                    ***0***           `uvm_info("SEQ", "Reset verification for REG1 passed!", UVM_LOW);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     196                                  ***0***     Count coming in to IF
#     196             1                    ***0***     `uvm_info("SEQ", "====== REG2 RESET ======", UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     198                                  ***0***     Count coming in to IF
#     198             1                    ***0***     `uvm_info("SEQ", $sformatf("Reset Value is present: %0b ", reset_status), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     201                                  ***0***     Count coming in to IF
#     201             1                    ***0***     `uvm_info("SEQ", $sformatf(" REG2:reset value present in RAL model: 0x%08h",reset_reg), UVM_LOW);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     204                                  ***0***     Count coming in to IF
#     204             1                    ***0***     `uvm_info("SEQ", $sformatf("before reset -> Desired: 0x%08h, Mirrored:0x%08h",rdata,rdata_m), UVM_LOW);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     211                                  ***0***     Count coming in to IF
#     211             1                    ***0***     `uvm_info("SEQ", $sformatf("After reset -> Desired: %0h, Mirrored: %0h", rdata, rdata_m), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     212                                  ***0***     Count coming in to IF
#     212             1                    ***0***     if(dout !== reset_reg)begin
#     214             1                    ***0***     end else begin
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     213                                  ***0***     Count coming in to IF
#     213             1                    ***0***       `uvm_error("SEQ", $sformatf("Reset mismatch: DUT read = 0x%08h, Expected (RAL) = 0x%08h", dout, reset_reg));
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     215                                  ***0***     Count coming in to IF
#     215             1                    ***0***       `uvm_info("SEQ", "Reset verification for REG2 passed!", UVM_LOW);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     218                                  ***0***     Count coming in to IF
#     218             1                    ***0***     `uvm_info("SEQ", "====== REG3 RESET ======", UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     220                                  ***0***     Count coming in to IF
#     220             1                    ***0***     `uvm_info("SEQ", $sformatf("Reset Value is present: %0b ", reset_status), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     223                                  ***0***     Count coming in to IF
#     223             1                    ***0***     `uvm_info("SEQ", $sformatf(" REG3:reset value present in RAL model: 0x%08h",reset_reg), UVM_LOW);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     226                                  ***0***     Count coming in to IF
#     226             1                    ***0***     `uvm_info("SEQ", $sformatf("before reset -> Desired: 0x%08h, Mirrored:0x%08h",rdata,rdata_m), UVM_LOW);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     233                                  ***0***     Count coming in to IF
#     233             1                    ***0***     `uvm_info("SEQ", $sformatf("After reset -> Desired: %0h, Mirrored: %0h", rdata, rdata_m), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     234                                  ***0***     Count coming in to IF
#     234             1                    ***0***     if(dout !== reset_reg)begin
#     236             1                    ***0***     end else begin
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     235                                  ***0***     Count coming in to IF
#     235             1                    ***0***       `uvm_error("SEQ", $sformatf("Reset mismatch: DUT read = 0x%08h, Expected (RAL) = 0x%08h", dout, reset_reg));
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     237                                  ***0***     Count coming in to IF
#     237             1                    ***0***       `uvm_info("SEQ", "Reset verification for REG3 passed!", UVM_LOW);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     241                                  ***0***     Count coming in to IF
#     241             1                    ***0***     `uvm_info("SEQ", "====== REG4 RESET ======", UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     243                                  ***0***     Count coming in to IF
#     243             1                    ***0***     `uvm_info("SEQ", $sformatf("Reset Value is present: %0b ", reset_status), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     246                                  ***0***     Count coming in to IF
#     246             1                    ***0***     `uvm_info("SEQ", $sformatf(" REG4:reset value present in RAL model: 0x%08h",reset_reg), UVM_LOW);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     249                                  ***0***     Count coming in to IF
#     249             1                    ***0***     `uvm_info("SEQ", $sformatf("before reset -> Desired: 0x%08h, Mirrored:0x%08h",rdata,rdata_m), UVM_LOW);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     256                                  ***0***     Count coming in to IF
#     256             1                    ***0***     `uvm_info("SEQ", $sformatf("After reset -> Desired: %0h, Mirrored: %0h", rdata, rdata_m), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     257                                  ***0***     Count coming in to IF
#     257             1                    ***0***     if(dout !== reset_reg)begin
#     259             1                    ***0***     end else begin
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     258                                  ***0***     Count coming in to IF
#     258             1                    ***0***       `uvm_error("SEQ", $sformatf("Reset mismatch: DUT read = 0x%08h, Expected (RAL) = 0x%08h", dout, reset_reg));
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     260                                  ***0***     Count coming in to IF
#     260             1                    ***0***       `uvm_info("SEQ", "Reset verification for REG4 passed!", UVM_LOW);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     318                                  ***0***     Count coming in to IF
#     318             1                    ***0***       `uvm_object_utils(backdoor_seq)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     318                                  ***0***     Count coming in to IF
#     318             2                    ***0***       `uvm_object_utils(backdoor_seq)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     318                                  ***0***     Count coming in to IF
#     318             3                    ***0***       `uvm_object_utils(backdoor_seq)
#     318             4                    ***0***       `uvm_object_utils(backdoor_seq)
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     318                                  ***0***     Count coming in to IF
#     318             5                    ***0***       `uvm_object_utils(backdoor_seq)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     318                                  ***0***     Count coming in to IF
#     318             6                    ***0***       `uvm_object_utils(backdoor_seq)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     330                                  ***0***     Count coming in to IF
#     330             1                    ***0***         `uvm_info("SEQ", $sformatf("POKE:Write -> Desired: %0h Mirrored: %0h",rdata, rdata_m), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     336                                  ***0***     Count coming in to IF
#     336             1                    ***0***         `uvm_info("SEQ", $sformatf("AFTER PEEK--->Desired: %0h Mirrored: %0h", rdata, rdata_m), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# 
# Condition Coverage:
#     Enabled Coverage            Active   Covered    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FEC Condition Terms              0         0         0     100.0
# Expression Coverage:
#     Enabled Coverage            Active   Covered    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FEC Expression Terms             0         0         0     100.0
# FSM Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FSMs                                                       100.0
#         States                       0         0         0     100.0
#         Transitions                  0         0         0     100.0
# Toggle Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Toggle Bins                      0         0         0     100.0
# 
# ================================Toggle Details================================
# 
# Toggle Coverage for File reg_seq.sv --
# 
#        Line                                   Node      1H->0L      0L->1H  "Coverage"
# --------------------------------------------------------------------------------------
# 
# Total Node Count     =          0 
# Toggled Node Count   =          0 
# Untoggled Node Count =          0 
# 
# Toggle Coverage      =      100.0% (0 of 0 bins)
# 
# =================================================================================
# === File: scoreboard.sv
# =================================================================================
# Statement Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Stmts                           23         0        23       0.0
# 
# ================================Statement Details================================
# 
# Statement Coverage for file scoreboard.sv --
# 
#     1                                                /*class scoreboard extends uvm_scoreboard;
#     2                                                  `uvm_component_utils(scoreboard)
#     3                                                  uvm_analysis_imp#(seq_item,scoreboard) received_value;
#     4                                                  bit [7:0] temp_data;
#     5                                                  bit [31:0] temp;
#     6                                                
#     7                                                  function new(input string name = "scoreboard", uvm_component parent = null);
#     8                                                    super.new(name,parent);
#     9                                                  endfunction
#     10                                               
#     11                                                 virtual function void build_phase(uvm_phase phase);
#     12                                                   super.build_phase(phase);
#     13                                                   received_value  = new("received_value", this);
#     14                                                   $display("------SCOREBOARD BUILD PHASE------");
#     15                                                 endfunction
#     16                                               
#     17                                                 virtual function void write(seq_item tr);
#     18                                                   `uvm_info("SCOREBOARD", $sformatf("||pwrite||:%0b ||paddrr||:%0d ||pwdata||:%0d || prdata||:%0d", tr.pwrite, tr.paddr, tr.pwdata, tr.prdata), UVM_NONE) 
#     19                                                   if(tr.pwrite == 1'b1)
#     20                                                     begin
#     21                                                       if(tr.paddr == 1'b0) 
#     22                                                         begin
#     23                                                           temp_data = tr.pwdata;
#     24                                                           `uvm_info("--SCOREBOARD--", $sformatf("--->Data Stored : %0d", tr.pwdata), UVM_NONE) 
#     25                                                         end
#     26                                                       else
#     27                                                         begin
#     28                                                           `uvm_info("--SCOREBOARD--", "------------No Such Addr-----------", UVM_NONE)
#     29                                                         end
#     30                                                     end
#     31                                                   else
#     32                                                     begin
#     33                                                       if(tr.paddr == 1'b0) 
#     34                                                         begin
#     35                                                           if(tr.prdata == temp_data)begin
#     36                                                             `uvm_info("SCO","==========================Test Passed===========================", UVM_NONE) 
#     37                                                           end
#     38                                                           else
#     39                                                             begin
#     40                                                               `uvm_info("SCO", "=======================Test failed===========================", UVM_NONE);
#     41                                                             end
#     42                                                         end
#     43                                                     end
#     44                                                   $display("------------scoreboard end-----------------");
#     45                                               /*
#     46                                               if (tr.pwrite) begin
#     47                                                     temp[tr.paddr] = tr.pwdata;
#     48                                                     `uvm_info("SCOREBOARD", $sformatf("WRITE: Addr = %0h, Data = %0h", tr.paddr, tr.pwdata), UVM_MEDIUM);
#     49                                                   end else begin
#     50                                                     if (temp[tr.paddr] !== tr.prdata) begin
#     51                                                       `uvm_error("SCOREBOARD", $sformatf("Mismatch at Addr = %0h, Expected = %0h, Received = %0h", tr.paddr, temp[tr.paddr], tr.prdata));
#     52                                                     end else begin
#     53                                                       `uvm_info("SCOREBOARD", $sformatf("READ MATCH: Addr = %0h, Data = %0h", tr.paddr, tr.prdata), UVM_MEDIUM);
#     54                                                     end
#     55                                                   end*/
#     56                                                /* endfunction
#     57                                               endclass 
#     58                                               //================================================
#     59                                               class scoreboard extends uvm_scoreboard;
#     60                                                 `uvm_component_utils(scoreboard)
#     61                                               
#     62                                                 uvm_analysis_imp#(seq_item, scoreboard) received_value;
#     63                                                 seq_item tr_q[$];  // Transaction queue
#     64                                               
#     65                                                 bit [31:0] temp_data[16];
#     66                                               
#     67                                                 function new(string name = "scoreboard", uvm_component parent = null);
#     68                                                   super.new(name, parent);
#     69                                                 endfunction
#     70                                               
#     71                                                 virtual function void build_phase(uvm_phase phase);
#     72                                                   super.build_phase(phase);
#     73                                                   received_value = new("received_value", this);
#     74                                                 endfunction
#     75                                               
#     76                                                 // Push incoming transactions into the queue
#     77                                                 virtual function void write(seq_item tr);
#     78                                                   tr_q.push_back(tr);
#     79                                                 endfunction
#     80                                               
#     81                                                 // Run phase: poll the queue for new transactions
#     82                                                 virtual task run_phase(uvm_phase phase);
#     83                                                   seq_item tr;
#     84                                                   forever begin
#     85                                                     wait(tr_q.size() > 0);
#     86                                                       tr = tr_q.pop_front();
#     87                                               
#     88                                                       //`uvm_info("SCOREBOARD", $sformatf("Wr :%0b Addr : %0d Din:%0d Dout:%0d", tr.pwrite, tr.paddr, tr.pwdata, tr.prdata), UVM_NONE)
#     89                                               
#     90                                                       if (tr.pwrite == 1'b1) begin
#     91                                                       //if (tr.pwrite == 1'b1 && tr.psel==1 && tr.penable==1) begin
#     92                                                           temp_data[tr.paddr]  = tr.pwdata;
#     93                                                           `uvm_info("SCOREBOARD", $sformatf("Data Stored : %0h ", tr.pwdata), UVM_NONE)
#     94                                                           
#     95                                                       end else
#     96                                                           
#     97                                                       if (tr.pwrite == 1'b0 && tr.psel==1 && tr.penable==1) begin
#     98                                               			tr.prdata = temp_data[tr.paddr];
#     99                                               
#     100                                                          `uvm_info("SCOREBOARD", $sformatf("Data Read : %0h ,from register:%0h", tr.prdata,temp_data[tr.paddr]), UVM_NONE)
#     101                                                      end 
#     102                                               //       compare();
#     103                                                   end
#     104                                                 endtask
#     105                                              
#     106                                               /*virtual task compare();
#     107                                                          
#     108                                                          if (temp_data[tr.paddr] == tr.prdata) begin
#     109                                                            `uvm_info("SCO", $sformatf("Mismatch! Expected: %0p, Got: %0h", temp_data, tr.prdata),UVM_MEDIUM);
#     110                                                          
#     111                                                      //end
#     112                                                        end else begin
#     113                                                          `uvm_info("SCO", "No Such Addr", UVM_NONE);
#     114                                                        end
#     115                                                     
#     116                                              */
#     117                                                    //end else begin
#     118                                                      // Avoid tight polling
#     119                                                //      #1ns;
#     120                                              //      end
#     121                                                //  end
#     122                                               // endtask
#     123                                              //endclass
#     124                                              
#     125                                              
#     126                                              class scoreboard extends uvm_scoreboard;
#     127             1                    ***0***       `uvm_component_utils(scoreboard)
#     127             2                    ***0***     
#     127             3                    ***0***     
#     128                                              
#     129                                                uvm_analysis_imp#(seq_item, scoreboard) received_value;
#     130                                                seq_item tr_q[$];  // Transaction queue
#     131                                              
#     132                                                bit [31:0] temp_data[16];   // Expected model of register values
#     133             1                    ***0***       int match_count = 0;
#     134             1                    ***0***       int mismatch_count = 0;
#     135                                              
#     136                                                function new(string name = "scoreboard", uvm_component parent = null);
#     137             1                    ***0***         super.new(name, parent);
#     138                                                endfunction
#     139                                              
#     140                                                virtual function void build_phase(uvm_phase phase);
#     141             1                    ***0***         super.build_phase(phase);
#     142             1                    ***0***         received_value = new("received_value", this);
#     143                                                endfunction
#     144                                              
#     145                                                // Incoming transactions are pushed into the queue
#     146                                                virtual function void write(seq_item tr);
#     147             1                    ***0***         tr_q.push_back(tr);
#     148                                                endfunction
#     149                                              
#     150                                                virtual task run_phase(uvm_phase phase);
#     151                                                  seq_item tr;
#     152             1                    ***0***         forever begin
#     153             1                    ***0***           wait(tr_q.size() > 0);
#     154             1                    ***0***           tr = tr_q.pop_front();
#     155                                              
#     156                                                    if (tr.psel == 1 && tr.penable == 1) begin
#     157                                              
#     158                                                      if (tr.pwrite == 1'b1) begin  // WRITE
#     159             1                    ***0***               temp_data[tr.paddr] = tr.pwdata;
#     160             1                    ***0***               `uvm_info("SCOREBOARD", $sformatf("WRITE: Addr=%0h, Data Stored=%0h", tr.paddr, tr.pwdata), UVM_NONE);
#     161                                              
#     162                                                      end else begin  // READ
#     163             1                    ***0***               `uvm_info("SCOREBOARD", $sformatf("READ: Addr=%0h, DUT Data=%0h, Expected=%0h", tr.paddr, tr.prdata, temp_data[tr.paddr]), UVM_NONE);
#     164             1                    ***0***               compare(tr);
#     165                                                      end
#     166                                              
#     167                                                    end
#     168                                                  end
#     169                                                endtask
#     170                                              
#     171                                                // Compare actual prdata with model
#     172                                               /* virtual task compare(seq_item tr);
#     173                                                  //if (temp_data.exists(tr.paddr)) begin
#     174                                                    if (temp_data[tr.paddr] == tr.prdata) begin
#     175                                                      match_count++;
#     176                                                      `uvm_info("SCOREBOARD", $sformatf("MATCH at Addr=%0h: Expected=%0h, Got=%0h", tr.paddr, temp_data[tr.paddr], tr.prdata), UVM_LOW);
#     177                                                    end
#     178                                                    else begin
#     179                                                      mismatch_count++;
#     180                                                      `uvm_error("SCOREBOARD", $sformatf("MISMATCH at Addr=%0h: Expected=%0h, Got=%0h", tr.paddr, temp_data[tr.paddr], tr.prdata));
#     181                                                    end
#     182                                                   else begin
#     183                                                    `uvm_warning("SCOREBOARD", $sformatf("READ before WRITE at Addr=%0h", tr.paddr));
#     184                                                  end
#     185                                                endtask*/
#     186                                              //======================
#     187                                              
#     188                                                virtual task compare(seq_item tr);
#     189                                                if (temp_data[tr.paddr] == tr.prdata) begin
#     190             1                    ***0***         match_count++;
#     191             1                    ***0***         `uvm_info("SCOREBOARD", $sformatf("MATCH at Addr=%0h: Expected=%0h, Got=%0h", tr.paddr, temp_data[tr.paddr], tr.prdata), UVM_LOW);
#     192                                                end else begin
#     193             1                    ***0***         mismatch_count++;
#     194             1                    ***0***         `uvm_error("SCOREBOARD", $sformatf("MISMATCH at Addr=%0h: Expected=%0h, Got=%0h", tr.paddr, temp_data[tr.paddr], tr.prdata));
#     195                                                end
#     196                                              endtask
#     197                                              
#     198                                                // Report match and mismatch count at end of simulation
#     199                                                virtual function void report_phase(uvm_phase phase);
#     200             1                    ***0***         `uvm_info("SCOREBOARD", "------------------ FINAL SCOREBOARD REPORT ------------------", UVM_NONE);
#     201             1                    ***0***         `uvm_info("SCOREBOARD", $sformatf("Total Matches   : %0d", match_count), UVM_NONE);
#     202             1                    ***0***         `uvm_info("SCOREBOARD", $sformatf("Total Mismatches: %0d", mismatch_count), UVM_NONE);
#     203                                                endfunction
#     204                                              endclass
#     205                                              
# 
# Branch Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Branches                        20         0        20       0.0
# 
# ================================Branch Details================================
# 
# Branch Coverage for file scoreboard.sv --
# 
# ------------------------------------IF Branch------------------------------------
#     156                                  ***0***     Count coming in to IF
#     156             1                    ***0***           if (tr.psel == 1 && tr.penable == 1) begin
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     158                                  ***0***     Count coming in to IF
#     158             1                    ***0***             if (tr.pwrite == 1'b1) begin  // WRITE
#     162             1                    ***0***             end else begin  // READ
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     160                                  ***0***     Count coming in to IF
#     160             1                    ***0***               `uvm_info("SCOREBOARD", $sformatf("WRITE: Addr=%0h, Data Stored=%0h", tr.paddr, tr.pwdata), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     163                                  ***0***     Count coming in to IF
#     163             1                    ***0***               `uvm_info("SCOREBOARD", $sformatf("READ: Addr=%0h, DUT Data=%0h, Expected=%0h", tr.paddr, tr.prdata, temp_data[tr.paddr]), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     189                                  ***0***     Count coming in to IF
#     189             1                    ***0***       if (temp_data[tr.paddr] == tr.prdata) begin
#     192             1                    ***0***       end else begin
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     191                                  ***0***     Count coming in to IF
#     191             1                    ***0***         `uvm_info("SCOREBOARD", $sformatf("MATCH at Addr=%0h: Expected=%0h, Got=%0h", tr.paddr, temp_data[tr.paddr], tr.prdata), UVM_LOW);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     194                                  ***0***     Count coming in to IF
#     194             1                    ***0***         `uvm_error("SCOREBOARD", $sformatf("MISMATCH at Addr=%0h: Expected=%0h, Got=%0h", tr.paddr, temp_data[tr.paddr], tr.prdata));
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     200                                  ***0***     Count coming in to IF
#     200             1                    ***0***         `uvm_info("SCOREBOARD", "------------------ FINAL SCOREBOARD REPORT ------------------", UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     201                                  ***0***     Count coming in to IF
#     201             1                    ***0***         `uvm_info("SCOREBOARD", $sformatf("Total Matches   : %0d", match_count), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     202                                  ***0***     Count coming in to IF
#     202             1                    ***0***         `uvm_info("SCOREBOARD", $sformatf("Total Mismatches: %0d", mismatch_count), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# 
# Condition Coverage:
#     Enabled Coverage            Active   Covered    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FEC Condition Terms              2         0         2       0.0
# 
# ================================Condition Details================================
# 
# Condition Coverage for file scoreboard.sv --
# 
# ----------------Focused Condition View-------------------
# Line       156 Item    1  ((tr.psel == 1) && (tr.penable == 1))
# Condition totals: 0 of 2 input terms covered = 0.0%
# 
#          Input Term   Covered  Reason for no coverage   Hint
#         -----------  --------  -----------------------  --------------
#      (tr.psel == 1)         N  No hits                  Hit '_0' and '_1'
#   (tr.penable == 1)         N  No hits                  Hit '_0' and '_1'
# 
#      Rows:       Hits  FEC Target            Non-masking condition(s)      
#  ---------  ---------  --------------------  -------------------------     
#   Row   1:    ***0***  (tr.psel == 1)_0      -                             
#   Row   2:    ***0***  (tr.psel == 1)_1      (tr.penable == 1)             
#   Row   3:    ***0***  (tr.penable == 1)_0   (tr.psel == 1)                
#   Row   4:    ***0***  (tr.penable == 1)_1   (tr.psel == 1)                
# 
# 
# Expression Coverage:
#     Enabled Coverage            Active   Covered    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FEC Expression Terms             0         0         0     100.0
# FSM Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FSMs                                                       100.0
#         States                       0         0         0     100.0
#         Transitions                  0         0         0     100.0
# Toggle Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Toggle Bins                      0         0         0     100.0
# 
# ================================Toggle Details================================
# 
# Toggle Coverage for File scoreboard.sv --
# 
#        Line                                   Node      1H->0L      0L->1H  "Coverage"
# --------------------------------------------------------------------------------------
# 
# Total Node Count     =          0 
# Toggled Node Count   =          0 
# Untoggled Node Count =          0 
# 
# Toggle Coverage      =      100.0% (0 of 0 bins)
# 
# =================================================================================
# === File: seq_item.sv
# =================================================================================
# Statement Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Stmts                           11         0        11       0.0
# 
# ================================Statement Details================================
# 
# Statement Coverage for file seq_item.sv --
# 
#     1                                                class seq_item extends uvm_sequence_item;
#     2                                                  rand bit [31:0] paddr;
#     3                                                  rand bit pwrite;
#     4                                                  rand bit psel;
#     5                                                  rand bit penable;
#     6                                                  rand bit [31:0] pwdata;
#     7                                                  bit [31:0] prdata;
#     8                                                 
#     9               1                    ***0***       `uvm_object_utils(seq_item)
#     9               2                    ***0***     
#     9               3                    ***0***     
#     9               4                    ***0***     
#     9               5                    ***0***     
#     9               6                    ***0***     
#     9               7                    ***0***     
#     9               8                    ***0***     
#     9               9                    ***0***     
#     9              10                    ***0***     
#     10                                                 
#     11                                                 function new(string name = "seq_item");
#     12              1                    ***0***         super.new(name);
#     13                                                 endfunction
#     14                                               endclass
# 
# Branch Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Branches                        10         0        10       0.0
# 
# ================================Branch Details================================
# 
# Branch Coverage for file seq_item.sv --
# 
# ------------------------------------IF Branch------------------------------------
#     9                                    ***0***     Count coming in to IF
#     9               1                    ***0***       `uvm_object_utils(seq_item)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     9                                    ***0***     Count coming in to IF
#     9               2                    ***0***       `uvm_object_utils(seq_item)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     9                                    ***0***     Count coming in to IF
#     9               3                    ***0***       `uvm_object_utils(seq_item)
#     9               4                    ***0***       `uvm_object_utils(seq_item)
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     9                                    ***0***     Count coming in to IF
#     9               5                    ***0***       `uvm_object_utils(seq_item)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     9                                    ***0***     Count coming in to IF
#     9               6                    ***0***       `uvm_object_utils(seq_item)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# 
# Condition Coverage:
#     Enabled Coverage            Active   Covered    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FEC Condition Terms              0         0         0     100.0
# Expression Coverage:
#     Enabled Coverage            Active   Covered    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FEC Expression Terms             0         0         0     100.0
# FSM Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FSMs                                                       100.0
#         States                       0         0         0     100.0
#         Transitions                  0         0         0     100.0
# Toggle Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Toggle Bins                      0         0         0     100.0
# 
# ================================Toggle Details================================
# 
# Toggle Coverage for File seq_item.sv --
# 
#        Line                                   Node      1H->0L      0L->1H  "Coverage"
# --------------------------------------------------------------------------------------
# 
# Total Node Count     =          0 
# Toggled Node Count   =          0 
# Untoggled Node Count =          0 
# 
# Toggle Coverage      =      100.0% (0 of 0 bins)
# 
# =================================================================================
# === File: sequencer.sv
# =================================================================================
# Statement Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Stmts                            4         0         4       0.0
# 
# ================================Statement Details================================
# 
# Statement Coverage for file sequencer.sv --
# 
#     1                                                class sequencer extends uvm_sequencer #(seq_item);
#     2               1                    ***0***       `uvm_component_utils(sequencer)
#     2               2                    ***0***     
#     2               3                    ***0***     
#     3                                                  function new (string name="sequencer", uvm_component parent);
#     4               1                    ***0***         super.new(name, parent); 
#     5                                                  endfunction
#     6                                                endclass
# 
# Branch Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Branches                         0         0         0     100.0
# Condition Coverage:
#     Enabled Coverage            Active   Covered    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FEC Condition Terms              0         0         0     100.0
# Expression Coverage:
#     Enabled Coverage            Active   Covered    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FEC Expression Terms             0         0         0     100.0
# FSM Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FSMs                                                       100.0
#         States                       0         0         0     100.0
#         Transitions                  0         0         0     100.0
# Toggle Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Toggle Bins                      0         0         0     100.0
# 
# ================================Toggle Details================================
# 
# Toggle Coverage for File sequencer.sv --
# 
#        Line                                   Node      1H->0L      0L->1H  "Coverage"
# --------------------------------------------------------------------------------------
# 
# Total Node Count     =          0 
# Toggled Node Count   =          0 
# Untoggled Node Count =          0 
# 
# Toggle Coverage      =      100.0% (0 of 0 bins)
# 
# =================================================================================
# === File: test.sv
# =================================================================================
# Statement Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Stmts                           54         0        54       0.0
# 
# ================================Statement Details================================
# 
# Statement Coverage for file test.sv --
# 
#     1                                                class test extends uvm_test;
#     2               1                    ***0***       `uvm_component_utils(test)
#     2               2                    ***0***     
#     2               3                    ***0***     
#     3                                                
#     4                                                  function new(string name = "test", uvm_component parent = null);
#     5               1                    ***0***         super.new(name,parent);
#     6                                                  endfunction
#     7                                                  
#     8                                                  environment env;
#     9                                                  reg_seq rseq;
#     10                                               
#     11                                                 virtual function void build_phase(uvm_phase phase);
#     12              1                    ***0***         super.build_phase(phase);
#     13              1                    ***0***         env = environment::type_id::create("env",this);
#     14              1                    ***0***         rseq = reg_seq::type_id::create("rseq");
#     15                                                 endfunction
#     16                                               
#     17                                                 virtual task run_phase(uvm_phase phase);
#     18              1                    ***0***         phase.raise_objection(this);
#     19              1                    ***0***         rseq.regmodel = env.regmodel;
#     20              1                    ***0***         rseq.start(env.agent_inst.seqr);
#     21              1                    ***0***         phase.drop_objection(this);
#     22              1                    ***0***         phase.phase_done.set_drain_time(this, 20);
#     23                                                 endtask
#     24                                               endclass
#     25                                               
#     26                                               class reset_test extends uvm_test;
#     27              1                    ***0***       `uvm_component_utils(reset_test)
#     27              2                    ***0***     
#     27              3                    ***0***     
#     28                                                 function new(string name = "reset_test",uvm_component parent = null);
#     29              1                    ***0***         super.new(name,parent);
#     30                                                 endfunction
#     31                                               
#     32                                                  environment env;
#     33                                                 reset_seq rseq;
#     34                                               
#     35                                                 virtual function void build_phase(uvm_phase phase);
#     36              1                    ***0***         super.build_phase(phase);
#     37              1                    ***0***         env = environment::type_id::create("env",this);
#     38              1                    ***0***         rseq = reset_seq::type_id::create("rseq");
#     39                                                 endfunction
#     40                                               
#     41                                               //run phase 
#     42                                                 virtual task run_phase(uvm_phase phase);
#     43              1                    ***0***         phase.raise_objection(this);
#     44              1                    ***0***         rseq.regmodel = env.regmodel;
#     45              1                    ***0***         rseq.start(env.agent_inst.seqr);
#     46              1                    ***0***         phase.drop_objection(this);
#     47              1                    ***0***         phase.phase_done.set_drain_time(this,20); 
#     48                                                 endtask 
#     49                                               endclass
#     50                                               
#     51                                               
#     52                                               class backdoor_test extends uvm_test;
#     53              1                    ***0***       `uvm_component_utils(backdoor_test)
#     53              2                    ***0***     
#     53              3                    ***0***     
#     54                                                 function new(string name = "backdoor_test",uvm_component parent = null);
#     55              1                    ***0***         super.new(name,parent);
#     56                                                 endfunction
#     57                                               
#     58                                                  environment env;
#     59                                                  backdoor_seq rseq;
#     60                                               
#     61                                                 virtual function void build_phase(uvm_phase phase);
#     62              1                    ***0***         super.build_phase(phase);
#     63              1                    ***0***         env = environment::type_id::create("env",this);
#     64              1                    ***0***         rseq = backdoor_seq::type_id::create("rseq");
#     65                                                 endfunction
#     66                                               
#     67                                               //run phase 
#     68                                                 virtual task run_phase(uvm_phase phase);
#     69              1                    ***0***         phase.raise_objection(this);
#     70              1                    ***0***         rseq.regmodel = env.regmodel;
#     71              1                    ***0***         rseq.start(env.agent_inst.seqr);
#     72              1                    ***0***         phase.drop_objection(this);
#     73              1                    ***0***         phase.phase_done.set_drain_time(this,20); 
#     74                                                 endtask 
#     75                                               endclass
#     76                                               
#     77                                               class reg_test extends uvm_test;
#     78              1                    ***0***       `uvm_component_utils(reg_test)
#     78              2                    ***0***     
#     78              3                    ***0***     
#     79                                                 
#     80                                                 reset_seq seq1;
#     81                                                 reg_seq seq2;
#     82                                               
#     83                                                 environment env;
#     84                                               
#     85                                                 function new(string name = "reg_test",uvm_component parent = null);
#     86              1                    ***0***         super.new(name,parent);
#     87                                                 endfunction
#     88                                               
#     89                                                 virtual function void build_phase(uvm_phase phase);
#     90              1                    ***0***         super.build_phase(phase);
#     91              1                    ***0***         env = environment::type_id::create("env",this);
#     92              1                    ***0***         seq1 = reset_seq::type_id::create("seq1", this);
#     93              1                    ***0***         seq2 = reg_seq::type_id::create("seq2", this);
#     94                                                 endfunction
#     95                                                 virtual task run_phase(uvm_phase phase);
#     96                                                    
#     97              1                    ***0***         phase.raise_objection(this);
#     98              1                    ***0***         seq1.regmodel = env.regmodel;
#     99              1                    ***0***         seq1.start(env.agent_inst.seqr);
#     100             1                    ***0***         phase.drop_objection(this);
#     101             1                    ***0***         phase.phase_done.set_drain_time(this, 20);
#     102                                              
#     103             1                    ***0***         phase.raise_objection(this);
#     104             1                    ***0***         seq2.regmodel = env.regmodel;
#     105             1                    ***0***         seq2.start(env.agent_inst.seqr);
#     106             1                    ***0***         phase.drop_objection(this);
#     107             1                    ***0***         phase.phase_done.set_drain_time(this, 20);
#     108                                                endtask
#     109                                              endclass
# 
# Branch Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Branches                         0         0         0     100.0
# Condition Coverage:
#     Enabled Coverage            Active   Covered    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FEC Condition Terms              0         0         0     100.0
# Expression Coverage:
#     Enabled Coverage            Active   Covered    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FEC Expression Terms             0         0         0     100.0
# FSM Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FSMs                                                       100.0
#         States                       0         0         0     100.0
#         Transitions                  0         0         0     100.0
# Toggle Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Toggle Bins                      0         0         0     100.0
# 
# ================================Toggle Details================================
# 
# Toggle Coverage for File test.sv --
# 
#        Line                                   Node      1H->0L      0L->1H  "Coverage"
# --------------------------------------------------------------------------------------
# 
# Total Node Count     =          0 
# Toggled Node Count   =          0 
# Untoggled Node Count =          0 
# 
# Toggle Coverage      =      100.0% (0 of 0 bins)
# 
# =================================================================================
# === File: testbench.sv
# =================================================================================
# Statement Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Stmts                           10         0        10       0.0
# 
# ================================Statement Details================================
# 
# Statement Coverage for file testbench.sv --
# 
#     1                                                `include "uvm_macros.svh"
#     2                                                 import uvm_pkg::*;
#     3                                                `include "package.sv"
#     4                                                
#     5                                                `include "design.v"
#     6                                                module tb;
#     7                                                  bit clk;
#     8                                                  bit rst;
#     9                                                  top_if vif(.clk(clk),.rst(rst));
#     10                                                 top DUT(.pclk(vif.clk),.presetn(vif.rst),.psel(vif.psel),.penable(vif.penable),.pwrite(vif.pwrite),.paddr(vif.paddr),.pwdata(vif.pwdata),.prdata(vif.prdata));
#     11                                               
#     12                                                initial begin
#     13              1                    ***0***      clk = 0;
#     14              1                    ***0***      rst = 0;
#     15              1                    ***0***     #10 rst =1;
#     15              2                    ***0***     
#     16                                                end
#     17                                               
#     18              1                    ***0***       always #10 clk = ~clk;
#     18              2                    ***0***     
#     19                                                 
#     20                                                 initial begin
#     21              1                    ***0***       uvm_config_db#(virtual top_if)::set(null, "*", "vif", vif);
#     22              1                    ***0***       run_test("reg_test");  
#     23                                                 end
#     24                                                 
#     25                                                 initial begin
#     26              1                    ***0***        $dumpfile("dump.vcd");
#     27              1                    ***0***       $dumpvars;
#     28                                                 end
#     29                                                 
#     30                                               endmodule
# 
# Branch Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Branches                         0         0         0     100.0
# Condition Coverage:
#     Enabled Coverage            Active   Covered    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FEC Condition Terms              0         0         0     100.0
# Expression Coverage:
#     Enabled Coverage            Active   Covered    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FEC Expression Terms             0         0         0     100.0
# FSM Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FSMs                                                       100.0
#         States                       0         0         0     100.0
#         Transitions                  0         0         0     100.0
# Toggle Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Toggle Bins                      4         0         4       0.0
# 
# ================================Toggle Details================================
# 
# Toggle Coverage for File testbench.sv --
# 
#        Line                                   Node      1H->0L      0L->1H  "Coverage"
# --------------------------------------------------------------------------------------
#           7                                    clk           0           0        0.00 
#           8                                    rst           0           0        0.00 
# 
# Total Node Count     =          2 
# Toggled Node Count   =          0 
# Untoggled Node Count =          2 
# 
# Toggle Coverage      =        0.0% (0 of 4 bins)
# 
# 
# Total Coverage By File (code coverage only, filtered view): 0.0%
# 
# 
# run -all
# ----------------------------------------------------------------
# UVM-1.1d
# (C) 2007-2013 Mentor Graphics Corporation
# (C) 2007-2013 Cadence Design Systems, Inc.
# (C) 2006-2013 Synopsys, Inc.
# (C) 2011-2013 Cypress Semiconductor Corp.
# ----------------------------------------------------------------
# 
#   ***********       IMPORTANT RELEASE NOTES         ************
# 
#   You are using a version of the UVM library that has been compiled
#   with `UVM_NO_DEPRECATED undefined.
#   See http://www.eda.org/svdb/view.php?id=3313 for more details.
# 
#   You are using a version of the UVM library that has been compiled
#   with `UVM_OBJECT_MUST_HAVE_CONSTRUCTOR undefined.
#   See http://www.eda.org/svdb/view.php?id=3770 for more details.
# 
#       (Specify +UVM_NO_RELNOTES to turn off this notice)
# 
# UVM_INFO verilog_src/questa_uvm_pkg-1.2/src/questa_uvm_pkg.sv(215) @ 0: reporter [Questa UVM] QUESTA_UVM-1.2.3
# UVM_INFO verilog_src/questa_uvm_pkg-1.2/src/questa_uvm_pkg.sv(217) @ 0: reporter [Questa UVM]  questa_uvm::init(+struct)
# UVM_INFO @ 0: reporter [RNTST] Running test reg_test...
# UVM_INFO reg_seq.sv(174) @ 0: uvm_test_top.env.agent_inst.seqr@@seq1 [SEQ] ====== REG1 RESET ======
# UVM_INFO reg_seq.sv(176) @ 0: uvm_test_top.env.agent_inst.seqr@@seq1 [SEQ] Reset Value is present: 1 
# UVM_INFO reg_seq.sv(179) @ 0: uvm_test_top.env.agent_inst.seqr@@seq1 [SEQ]  REG1:reset value present in RAL model: 0xa5a50000
# UVM_INFO reg_seq.sv(182) @ 0: uvm_test_top.env.agent_inst.seqr@@seq1 [SEQ] before reset -> Desired: 0x00000000, Mirrored:0x00000000
# ------ Applying reset value for REG1 ------
# -------------monitor begin----------
# -------------monitor begin----------
# UVM_INFO driver.sv(61) @ 50: uvm_test_top.env.agent_inst.drv [DRV] Data READ -> read data : 0
# -------------monitor begin----------
# -------------monitor begin----------
# -----------DRIVER----------
# UVM_INFO scoreboard.sv(163) @ 70: uvm_test_top.env.scb [SCOREBOARD] READ: Addr=4, DUT Data=0, Expected=0
# UVM_INFO scoreboard.sv(191) @ 70: uvm_test_top.env.scb [SCOREBOARD] MATCH at Addr=4: Expected=0, Got=0
# UVM_ERROR verilog_src/uvm-1.1d/src/reg/uvm_reg.svh(2890) @ 70: reporter [RegModel] Register "regmodel.reg1_inst" value read from DUT (0x0000000000000000) does not match mirrored value (0x00000000a5a50000)
# UVM_INFO verilog_src/uvm-1.1d/src/reg/uvm_reg.svh(2909) @ 70: reporter [RegModel] Field reg1 (regmodel.reg1_inst[31:0]) mismatch read=32'h0 mirrored=32'ha5a50000 
# UVM_INFO reg_seq.sv(189) @ 70: uvm_test_top.env.agent_inst.seqr@@seq1 [SEQ] After reset -> Desired: 0, Mirrored: 0
# UVM_ERROR reg_seq.sv(191) @ 70: uvm_test_top.env.agent_inst.seqr@@seq1 [SEQ] Reset mismatch: DUT read = 0x00000000, Expected (RAL) = 0xa5a50000
# UVM_INFO reg_seq.sv(196) @ 70: uvm_test_top.env.agent_inst.seqr@@seq1 [SEQ] ====== REG2 RESET ======
# UVM_INFO reg_seq.sv(198) @ 70: uvm_test_top.env.agent_inst.seqr@@seq1 [SEQ] Reset Value is present: 1 
# UVM_INFO reg_seq.sv(201) @ 70: uvm_test_top.env.agent_inst.seqr@@seq1 [SEQ]  REG2:reset value present in RAL model: 0x12349876
# UVM_INFO reg_seq.sv(204) @ 70: uvm_test_top.env.agent_inst.seqr@@seq1 [SEQ] before reset -> Desired: 0x00000000, Mirrored:0x00000000
# ------ Applying reset value for REG2 ------
# -------------monitor begin----------
# -------------monitor begin----------
# UVM_INFO driver.sv(61) @ 130: uvm_test_top.env.agent_inst.drv [DRV] Data READ -> read data : 0
# -------------monitor begin----------
# -------------monitor begin----------
# -----------DRIVER----------
# UVM_INFO scoreboard.sv(163) @ 150: uvm_test_top.env.scb [SCOREBOARD] READ: Addr=8, DUT Data=0, Expected=0
# UVM_INFO scoreboard.sv(191) @ 150: uvm_test_top.env.scb [SCOREBOARD] MATCH at Addr=8: Expected=0, Got=0
# UVM_ERROR verilog_src/uvm-1.1d/src/reg/uvm_reg.svh(2890) @ 150: reporter [RegModel] Register "regmodel.reg2_inst" value read from DUT (0x0000000000000000) does not match mirrored value (0x0000000012349876)
# UVM_INFO verilog_src/uvm-1.1d/src/reg/uvm_reg.svh(2909) @ 150: reporter [RegModel] Field reg2 (regmodel.reg2_inst[31:0]) mismatch read=32'h0 mirrored=32'h12349876 
# UVM_INFO reg_seq.sv(211) @ 150: uvm_test_top.env.agent_inst.seqr@@seq1 [SEQ] After reset -> Desired: 0, Mirrored: 0
# UVM_ERROR reg_seq.sv(213) @ 150: uvm_test_top.env.agent_inst.seqr@@seq1 [SEQ] Reset mismatch: DUT read = 0x00000000, Expected (RAL) = 0x12349876
# UVM_INFO reg_seq.sv(218) @ 150: uvm_test_top.env.agent_inst.seqr@@seq1 [SEQ] ====== REG3 RESET ======
# UVM_INFO reg_seq.sv(220) @ 150: uvm_test_top.env.agent_inst.seqr@@seq1 [SEQ] Reset Value is present: 1 
# UVM_INFO reg_seq.sv(223) @ 150: uvm_test_top.env.agent_inst.seqr@@seq1 [SEQ]  REG3:reset value present in RAL model: 0x5a5a5555
# UVM_INFO reg_seq.sv(226) @ 150: uvm_test_top.env.agent_inst.seqr@@seq1 [SEQ] before reset -> Desired: 0x00000000, Mirrored:0x00000000
# ------ Applying reset value for REG3 ------
# -------------monitor begin----------
# -------------monitor begin----------
# UVM_INFO driver.sv(61) @ 210: uvm_test_top.env.agent_inst.drv [DRV] Data READ -> read data : 0
# -------------monitor begin----------
# -------------monitor begin----------
# -----------DRIVER----------
# UVM_INFO scoreboard.sv(163) @ 230: uvm_test_top.env.scb [SCOREBOARD] READ: Addr=c, DUT Data=0, Expected=0
# UVM_INFO scoreboard.sv(191) @ 230: uvm_test_top.env.scb [SCOREBOARD] MATCH at Addr=c: Expected=0, Got=0
# UVM_ERROR verilog_src/uvm-1.1d/src/reg/uvm_reg.svh(2890) @ 230: reporter [RegModel] Register "regmodel.reg3_inst" value read from DUT (0x0000000000000000) does not match mirrored value (0x000000005a5a5555)
# UVM_INFO verilog_src/uvm-1.1d/src/reg/uvm_reg.svh(2909) @ 230: reporter [RegModel] Field reg3 (regmodel.reg3_inst[31:0]) mismatch read=32'h0 mirrored=32'h5a5a5555 
# UVM_INFO reg_seq.sv(233) @ 230: uvm_test_top.env.agent_inst.seqr@@seq1 [SEQ] After reset -> Desired: 0, Mirrored: 0
# UVM_ERROR reg_seq.sv(235) @ 230: uvm_test_top.env.agent_inst.seqr@@seq1 [SEQ] Reset mismatch: DUT read = 0x00000000, Expected (RAL) = 0x5a5a5555
# UVM_INFO reg_seq.sv(241) @ 230: uvm_test_top.env.agent_inst.seqr@@seq1 [SEQ] ====== REG4 RESET ======
# UVM_INFO reg_seq.sv(243) @ 230: uvm_test_top.env.agent_inst.seqr@@seq1 [SEQ] Reset Value is present: 1 
# UVM_INFO reg_seq.sv(246) @ 230: uvm_test_top.env.agent_inst.seqr@@seq1 [SEQ]  REG4:reset value present in RAL model: 0x0000ffff
# UVM_INFO reg_seq.sv(249) @ 230: uvm_test_top.env.agent_inst.seqr@@seq1 [SEQ] before reset -> Desired: 0x00000000, Mirrored:0x00000000
# ------ Applying reset value for REG4 ------
# -------------monitor begin----------
# -------------monitor begin----------
# UVM_INFO driver.sv(61) @ 290: uvm_test_top.env.agent_inst.drv [DRV] Data READ -> read data : 0
# -------------monitor begin----------
# -------------monitor begin----------
# -----------DRIVER----------
# UVM_INFO scoreboard.sv(163) @ 310: uvm_test_top.env.scb [SCOREBOARD] READ: Addr=10, DUT Data=0, Expected=0
# UVM_INFO scoreboard.sv(191) @ 310: uvm_test_top.env.scb [SCOREBOARD] MATCH at Addr=10: Expected=0, Got=0
# UVM_ERROR verilog_src/uvm-1.1d/src/reg/uvm_reg.svh(2890) @ 310: reporter [RegModel] Register "regmodel.reg4_inst" value read from DUT (0x0000000000000000) does not match mirrored value (0x000000000000ffff)
# UVM_INFO verilog_src/uvm-1.1d/src/reg/uvm_reg.svh(2909) @ 310: reporter [RegModel] Field reg4 (regmodel.reg4_inst[31:0]) mismatch read=32'h0 mirrored=32'hffff 
# UVM_INFO reg_seq.sv(256) @ 310: uvm_test_top.env.agent_inst.seqr@@seq1 [SEQ] After reset -> Desired: 0, Mirrored: 0
# UVM_ERROR reg_seq.sv(258) @ 310: uvm_test_top.env.agent_inst.seqr@@seq1 [SEQ] Reset mismatch: DUT read = 0x00000000, Expected (RAL) = 0x0000ffff
# UVM_INFO reg_seq.sv(14) @ 310: uvm_test_top.env.agent_inst.seqr@@seq2 [SEQ] ====== CNTRL ======
# UVM_INFO reg_seq.sv(18) @ 310: uvm_test_top.env.agent_inst.seqr@@seq2 [SEQ] Initial CNTRL -> Desired: 0, Mirrored: 0
# UVM_INFO reg_seq.sv(23) @ 310: uvm_test_top.env.agent_inst.seqr@@seq2 [SEQ] After set CNTRL -> Desired: 1, Mirrored: 0
# -------------monitor begin----------
# -------------monitor begin----------
# UVM_INFO driver.sv(48) @ 370: uvm_test_top.env.agent_inst.drv [DRV] Data Write -> Wdata : 1
# -------------monitor begin----------
# -------------monitor begin----------
# -----------DRIVER----------
# UVM_INFO scoreboard.sv(160) @ 390: uvm_test_top.env.scb [SCOREBOARD] WRITE: Addr=0, Data Stored=1
# UVM_INFO reg_seq.sv(28) @ 390: uvm_test_top.env.agent_inst.seqr@@seq2 [SEQ] After update CNTRL -> Desired: 1, Mirrored: 1, Read: 0
# -------------monitor begin----------
# -------------monitor begin----------
# UVM_INFO driver.sv(48) @ 450: uvm_test_top.env.agent_inst.drv [DRV] Data Write -> Wdata : 1
# -------------monitor begin----------
# -------------monitor begin----------
# -----------DRIVER----------
# UVM_INFO scoreboard.sv(160) @ 470: uvm_test_top.env.scb [SCOREBOARD] WRITE: Addr=0, Data Stored=1
# UVM_INFO reg_seq.sv(35) @ 470: uvm_test_top.env.agent_inst.seqr@@seq2 [SEQ] After write CNTRL -> Desired: 1, Mirrored: 1, Read: 0
# -------------monitor begin----------
# -------------monitor begin----------
# UVM_INFO driver.sv(61) @ 530: uvm_test_top.env.agent_inst.drv [DRV] Data READ -> read data : 0
# -------------monitor begin----------
# -------------monitor begin----------
# -----------DRIVER----------
# UVM_INFO scoreboard.sv(163) @ 550: uvm_test_top.env.scb [SCOREBOARD] READ: Addr=0, DUT Data=0, Expected=1
# UVM_ERROR scoreboard.sv(194) @ 550: uvm_test_top.env.scb [SCOREBOARD] MISMATCH at Addr=0: Expected=1, Got=0
# UVM_INFO reg_seq.sv(39) @ 550: uvm_test_top.env.agent_inst.seqr@@seq2 [SEQ] After read CNTRL -> Desired: 0, Mirrored: 0, Read: 0
# UVM_INFO reg_seq.sv(43) @ 550: uvm_test_top.env.agent_inst.seqr@@seq2 [SEQ] ====== REG1 ======
# UVM_INFO reg_seq.sv(47) @ 550: uvm_test_top.env.agent_inst.seqr@@seq2 [SEQ] Initial REG1 -> Desired: 0, Mirrored: 0
# UVM_INFO reg_seq.sv(52) @ 550: uvm_test_top.env.agent_inst.seqr@@seq2 [SEQ] After set REG1 -> Desired: 1, Mirrored: 0
# -------------monitor begin----------
# -------------monitor begin----------
# UVM_INFO driver.sv(48) @ 610: uvm_test_top.env.agent_inst.drv [DRV] Data Write -> Wdata : 1
# -------------monitor begin----------
# -------------monitor begin----------
# -----------DRIVER----------
# UVM_INFO scoreboard.sv(160) @ 630: uvm_test_top.env.scb [SCOREBOARD] WRITE: Addr=4, Data Stored=1
# UVM_INFO reg_seq.sv(57) @ 630: uvm_test_top.env.agent_inst.seqr@@seq2 [SEQ] After update  REG1 -> Desired: 1, Mirrored: 1, Read: 0
# -------------monitor begin----------
# -------------monitor begin----------
# UVM_INFO driver.sv(48) @ 690: uvm_test_top.env.agent_inst.drv [DRV] Data Write -> Wdata : 1
# -------------monitor begin----------
# -------------monitor begin----------
# -----------DRIVER----------
# UVM_INFO scoreboard.sv(160) @ 710: uvm_test_top.env.scb [SCOREBOARD] WRITE: Addr=4, Data Stored=1
# UVM_INFO reg_seq.sv(64) @ 710: uvm_test_top.env.agent_inst.seqr@@seq2 [SEQ] After write REG1 -> Desired: 1, Mirrored: 1, Read: 0
# -------------monitor begin----------
# -------------monitor begin----------
# UVM_INFO driver.sv(61) @ 770: uvm_test_top.env.agent_inst.drv [DRV] Data READ -> read data : 1
# -------------monitor begin----------
# -------------monitor begin----------
# -----------DRIVER----------
# UVM_INFO scoreboard.sv(163) @ 790: uvm_test_top.env.scb [SCOREBOARD] READ: Addr=4, DUT Data=1, Expected=1
# UVM_INFO scoreboard.sv(191) @ 790: uvm_test_top.env.scb [SCOREBOARD] MATCH at Addr=4: Expected=1, Got=1
# UVM_INFO reg_seq.sv(68) @ 790: uvm_test_top.env.agent_inst.seqr@@seq2 [SEQ] After read REG1 -> Desired: 1, Mirrored: 1, Read: 1
# UVM_INFO reg_seq.sv(72) @ 790: uvm_test_top.env.agent_inst.seqr@@seq2 [SEQ] ====== REG2 ======
# UVM_INFO reg_seq.sv(76) @ 790: uvm_test_top.env.agent_inst.seqr@@seq2 [SEQ] Initial REG2 -> Desired: 0, Mirrored: 0
# UVM_INFO reg_seq.sv(81) @ 790: uvm_test_top.env.agent_inst.seqr@@seq2 [SEQ] After set REG2 -> Desired: 11, Mirrored: 0
# -------------monitor begin----------
# -------------monitor begin----------
# UVM_INFO driver.sv(48) @ 850: uvm_test_top.env.agent_inst.drv [DRV] Data Write -> Wdata : 11
# -------------monitor begin----------
# -------------monitor begin----------
# -----------DRIVER----------
# UVM_INFO scoreboard.sv(160) @ 870: uvm_test_top.env.scb [SCOREBOARD] WRITE: Addr=8, Data Stored=11
# UVM_INFO reg_seq.sv(86) @ 870: uvm_test_top.env.agent_inst.seqr@@seq2 [SEQ] After update  REG2 -> Desired: 11, Mirrored: 11, Read: 1
# -------------monitor begin----------
# -------------monitor begin----------
# UVM_INFO driver.sv(48) @ 930: uvm_test_top.env.agent_inst.drv [DRV] Data Write -> Wdata : 11
# -------------monitor begin----------
# -------------monitor begin----------
# -----------DRIVER----------
# UVM_INFO scoreboard.sv(160) @ 950: uvm_test_top.env.scb [SCOREBOARD] WRITE: Addr=8, Data Stored=11
# UVM_INFO reg_seq.sv(93) @ 950: uvm_test_top.env.agent_inst.seqr@@seq2 [SEQ] After write REG2 -> Desired: 11, Mirrored: 11, Read: 1
# -------------monitor begin----------
# -------------monitor begin----------
# UVM_INFO driver.sv(61) @ 1010: uvm_test_top.env.agent_inst.drv [DRV] Data READ -> read data : 0
# -------------monitor begin----------
# -------------monitor begin----------
# -----------DRIVER----------
# UVM_INFO scoreboard.sv(163) @ 1030: uvm_test_top.env.scb [SCOREBOARD] READ: Addr=8, DUT Data=0, Expected=11
# UVM_ERROR scoreboard.sv(194) @ 1030: uvm_test_top.env.scb [SCOREBOARD] MISMATCH at Addr=8: Expected=11, Got=0
# UVM_INFO reg_seq.sv(97) @ 1030: uvm_test_top.env.agent_inst.seqr@@seq2 [SEQ] After read REG2 -> Desired: 0, Mirrored: 0, Read: 0
# UVM_INFO reg_seq.sv(100) @ 1030: uvm_test_top.env.agent_inst.seqr@@seq2 [SEQ] ====== REG3 ======
# UVM_INFO reg_seq.sv(104) @ 1030: uvm_test_top.env.agent_inst.seqr@@seq2 [SEQ] Initial REG3 -> Desired: 0, Mirrored: 0
# UVM_INFO reg_seq.sv(109) @ 1030: uvm_test_top.env.agent_inst.seqr@@seq2 [SEQ] After set REG3 -> Desired: 22, Mirrored: 0
# -------------monitor begin----------
# -------------monitor begin----------
# UVM_INFO driver.sv(48) @ 1090: uvm_test_top.env.agent_inst.drv [DRV] Data Write -> Wdata : 22
# -------------monitor begin----------
# -------------monitor begin----------
# -----------DRIVER----------
# UVM_INFO scoreboard.sv(160) @ 1110: uvm_test_top.env.scb [SCOREBOARD] WRITE: Addr=c, Data Stored=22
# UVM_INFO reg_seq.sv(114) @ 1110: uvm_test_top.env.agent_inst.seqr@@seq2 [SEQ] After update REG3 -> Desired: 22, Mirrored: 22, Read: 0
# -------------monitor begin----------
# -------------monitor begin----------
# UVM_INFO driver.sv(48) @ 1170: uvm_test_top.env.agent_inst.drv [DRV] Data Write -> Wdata : 12
# -------------monitor begin----------
# -------------monitor begin----------
# -----------DRIVER----------
# UVM_INFO scoreboard.sv(160) @ 1190: uvm_test_top.env.scb [SCOREBOARD] WRITE: Addr=c, Data Stored=12
# UVM_INFO reg_seq.sv(119) @ 1190: uvm_test_top.env.agent_inst.seqr@@seq2 [SEQ] After write REG3 -> Desired: 12, Mirrored: 12, Read: 0
# -------------monitor begin----------
# -------------monitor begin----------
# UVM_INFO driver.sv(61) @ 1250: uvm_test_top.env.agent_inst.drv [DRV] Data READ -> read data : 11
# -------------monitor begin----------
# -------------monitor begin----------
# -----------DRIVER----------
# UVM_INFO scoreboard.sv(163) @ 1270: uvm_test_top.env.scb [SCOREBOARD] READ: Addr=c, DUT Data=11, Expected=12
# UVM_ERROR scoreboard.sv(194) @ 1270: uvm_test_top.env.scb [SCOREBOARD] MISMATCH at Addr=c: Expected=12, Got=11
# UVM_INFO reg_seq.sv(123) @ 1270: uvm_test_top.env.agent_inst.seqr@@seq2 [SEQ] After read REG3 -> Desired: 11, Mirrored: 11, Read: 11
# UVM_INFO reg_seq.sv(128) @ 1270: uvm_test_top.env.agent_inst.seqr@@seq2 [SEQ] ====== REG4 ======
# UVM_INFO reg_seq.sv(132) @ 1270: uvm_test_top.env.agent_inst.seqr@@seq2 [SEQ] Initial REG4 -> Desired: 0, Mirrored: 0
# UVM_INFO reg_seq.sv(137) @ 1270: uvm_test_top.env.agent_inst.seqr@@seq2 [SEQ] After set REG4 -> Desired: 33, Mirrored: 0
# -------------monitor begin----------
# -------------monitor begin----------
# UVM_INFO driver.sv(48) @ 1330: uvm_test_top.env.agent_inst.drv [DRV] Data Write -> Wdata : 33
# -------------monitor begin----------
# -------------monitor begin----------
# -----------DRIVER----------
# UVM_INFO scoreboard.sv(160) @ 1350: uvm_test_top.env.scb [SCOREBOARD] WRITE: Addr=10, Data Stored=33
# UVM_INFO reg_seq.sv(142) @ 1350: uvm_test_top.env.agent_inst.seqr@@seq2 [SEQ] After update REG4 -> Desired: 33, Mirrored: 33, Read: 11
# -------------monitor begin----------
# -------------monitor begin----------
# UVM_INFO driver.sv(48) @ 1410: uvm_test_top.env.agent_inst.drv [DRV] Data Write -> Wdata : 23
# -------------monitor begin----------
# -------------monitor begin----------
# -----------DRIVER----------
# UVM_INFO scoreboard.sv(160) @ 1430: uvm_test_top.env.scb [SCOREBOARD] WRITE: Addr=10, Data Stored=23
# UVM_INFO reg_seq.sv(147) @ 1430: uvm_test_top.env.agent_inst.seqr@@seq2 [SEQ] After write REG4 -> Desired: 23, Mirrored: 23, Read: 11
# -------------monitor begin----------
# -------------monitor begin----------
# UVM_INFO driver.sv(61) @ 1490: uvm_test_top.env.agent_inst.drv [DRV] Data READ -> read data : 12
# -------------monitor begin----------
# -------------monitor begin----------
# -----------DRIVER----------
# UVM_INFO scoreboard.sv(163) @ 1510: uvm_test_top.env.scb [SCOREBOARD] READ: Addr=10, DUT Data=12, Expected=0
# UVM_ERROR scoreboard.sv(194) @ 1510: uvm_test_top.env.scb [SCOREBOARD] MISMATCH at Addr=10: Expected=0, Got=12
# UVM_INFO reg_seq.sv(151) @ 1510: uvm_test_top.env.agent_inst.seqr@@seq2 [SEQ] After read REG4 -> Desired: 12, Mirrored: 12, Read: 12
# UVM_INFO verilog_src/uvm-1.1d/src/base/uvm_objection.svh(1268) @ 1530: reporter [TEST_DONE] 'run' phase is ready to proceed to the 'extract' phase
# -------------monitor begin----------
# UVM_INFO scoreboard.sv(200) @ 1530: uvm_test_top.env.scb [SCOREBOARD] ------------------ FINAL SCOREBOARD REPORT ------------------
# UVM_INFO scoreboard.sv(201) @ 1530: uvm_test_top.env.scb [SCOREBOARD] Total Matches   : 5
# UVM_INFO scoreboard.sv(202) @ 1530: uvm_test_top.env.scb [SCOREBOARD] Total Mismatches: 4
# 
# --- UVM Report Summary ---
# 
# ** Report counts by severity
# UVM_INFO :  104
# UVM_WARNING :    0
# UVM_ERROR :   12
# UVM_FATAL :    0
# ** Report counts by id
# [DRV]    19
# [Questa UVM]     2
# [RNTST]     1
# [RegModel]     8
# [SCOREBOARD]    31
# [SEQ]    54
# [TEST_DONE]     1
# ** Note: $finish    : /tools/mentor/questasim_10.6c/questasim/linux/../verilog_src/uvm-1.1d/src/base/uvm_root.svh(430)
#    Time: 1530 ns  Iteration: 53  Instance: /tb
# Saving coverage database on exit...
# End time: 12:12:36 on Aug 06,2025, Elapsed time: 0:00:07
# Errors: 0, Warnings: 0
